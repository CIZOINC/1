{"version":3,"sources":["recursionHelper.js"],"names":[],"mappings":";;;AACA,OAAO,CACF,MAAM,CAAC,aAAa,EAAE,EAAE,CAAC,CACzB,OAAO,CAAC,iBAAiB,EAAE,CAAC,UAAU,EAAE,UAAS,QAAQ,EAAC;AACvD,gBAAY,CAAC;;AACb,WAAO;;;;;;;AAOH,eAAO,EAAE,iBAAS,OAAO,EAAE,IAAI,EAAE;;AAE7B,gBAAI,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;AAC1B,oBAAI,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;aACzB;;;AAAA,AAGD,gBAAI,QAAQ,GAAG,OAAO,CAAC,QAAQ,EAAE,CAAC,MAAM,EAAE,CAAC;AAC3C,gBAAI,gBAAgB;;AAAC,AAErB,mBAAO;AACH,mBAAG,EAAE,AAAC,IAAI,IAAI,IAAI,CAAC,GAAG,GAAI,IAAI,CAAC,GAAG,GAAG,IAAI;;;;AAIzC,oBAAI,EAAE,cAAS,KAAK,EAAE,OAAO,EAAC;;AAE1B,wBAAG,CAAC,gBAAgB,EAAC;AACjB,wCAAgB,GAAG,QAAQ,CAAC,QAAQ,CAAC,CAAC;qBACzC;;AAAA,AAED,oCAAgB,CAAC,KAAK,EAAE,UAAU,KAAK,EAAE;AACrC,+BAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;qBACzB,CAAC;;;AAAC,AAGH,wBAAI,IAAI,IAAI,IAAI,CAAC,IAAI,EAAC;AAClB,4BAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;qBACpC;iBACJ;aACJ,CAAC;SACL;KACJ,CAAC;CACL,CAAC,CAAC,CAAC","file":"recursionHelper-compiled.js","sourcesContent":["/*global angular*/\r\nangular\r\n    .module('app.helpers', [])\r\n    .factory('RecursionHelper', ['$compile', function($compile){\r\n        \"use strict\";\r\n        return {\r\n            /**\r\n             * Manually compiles the element, fixing the recursion loop.\r\n             * @param element\r\n             * @param [link] A post-link function, or an object with function(s) registered via pre and post properties.\r\n             * @returns {pre: *, post: RecursionHelper.post} object containing the linking functions.\r\n             */\r\n            compile: function(element, link) {\r\n                // Normalize the link parameter\r\n                if (angular.isFunction(link)) {\r\n                    link = { post: link };\r\n                }\r\n\r\n                // Break the recursion loop by removing the contents\r\n                var contents = element.contents().remove();\r\n                var compiledContents;\r\n                //noinspection JSValidateTypes\r\n                return {\r\n                    pre: (link && link.pre) ? link.pre : null,\r\n                    /**\r\n                     * Compiles and re-adds the contents\r\n                     */\r\n                    post: function(scope, element){\r\n                        // Compile the contents\r\n                        if(!compiledContents){\r\n                            compiledContents = $compile(contents);\r\n                        }\r\n                        // Re-add the compiled contents to the element\r\n                        compiledContents(scope, function (clone) {\r\n                            element.append(clone);\r\n                        });\r\n\r\n                        // Call the post-linking function, if any\r\n                        if (link && link.post){\r\n                            link.post.apply(null, arguments);\r\n                        }\r\n                    }\r\n                };\r\n            }\r\n        };\r\n    }]);"]}