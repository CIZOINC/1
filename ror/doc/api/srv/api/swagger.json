{
  "swagger": "2.0",
  "info": {
    "title": "Cizo API",
    "description": "API for Cizo",
    "version": "1.0.0"
  },
  "produces": ["application/json"],
  "host": "localhost:8080",
  "basePath": "/",
  "paths": {
  
  "/categories/{category-id}": {
    
    "get": {
      "summary": "",
      "description":"Returns a category for the given ID.",
      "x-swagger-router-controller": "Categories",
      "tags": ["Categories"],
      "operationId": "categoriesCategoryIdGet",
      "parameters": [
        {
  "name" : "category-id",
  "in" : "path",
  "description" : "Category ID",
  "required" : true,
  "type" : "integer"
}
        
      ],
      "responses": {
        "200": {
  "description" : "A category",
  "schema" : {
    "$ref" : "#/definitions/Category"
  }
}
        ,
        "default": {
  "description" : "Unexpected error",
  "schema" : {
    "$ref" : "#/definitions/Error"
  }
}
        
        
      }
    } ,
    
    "put": {
      "summary": "",
      "description":"Updates a category. Title must be unique.",
      "x-swagger-router-controller": "Categories",
      "tags": ["Categories"],
      "operationId": "categoriesCategoryIdPut",
      "parameters": [
        {
  "in" : "body",
  "name" : "body",
  "required" : true,
  "schema" : {
    "$ref" : "#/definitions/Category"
  }
},
        {
  "name" : "category-id",
  "in" : "path",
  "description" : "Category ID",
  "required" : true,
  "type" : "integer"
}
        
      ],
      "responses": {
        "200": {
  "description" : "A category",
  "schema" : {
    "$ref" : "#/definitions/Category"
  }
}
        ,
        "403": {
  "description" : "Forbidden. This is returned if the oauth2 scope is anything other than \"admin\"",
  "schema" : {
    "$ref" : "#/definitions/Error"
  }
}
        ,
        "409": {
  "description" : "Error occurring when a Category with that title already exists",
  "schema" : {
    "$ref" : "#/definitions/Error"
  }
}
        ,
        "default": {
  "description" : "Unexpected error",
  "schema" : {
    "$ref" : "#/definitions/Error"
  }
}
        
        
      }
    } ,
    
    "delete": {
      "summary": "",
      "description":"Deletes a category",
      "x-swagger-router-controller": "Categories",
      "tags": ["Categories"],
      "operationId": "categoriesCategoryIdDelete",
      "parameters": [
        {
  "name" : "category-id",
  "in" : "path",
  "description" : "Category ID",
  "required" : true,
  "type" : "integer"
}
        
      ],
      "responses": {
        "204": {
  "description" : "Successfully deleted"
}
        ,
        "403": {
  "description" : "Forbidden. This is returned if the oauth2 scope is anything other than \"admin\"",
  "schema" : {
    "$ref" : "#/definitions/Error"
  }
}
        ,
        "default": {
  "description" : "Unexpected error",
  "schema" : {
    "$ref" : "#/definitions/Error"
  }
}
        
        
      }
    } 
    
  } ,
  
  "/categories": {
    
    "get": {
      "summary": "",
      "description":"Returns a list of categories",
      "x-swagger-router-controller": "Categories",
      "tags": ["Categories"],
      "operationId": "categoriesGet",
      "responses": {
        "200": {
  "description" : "A list of categories",
  "schema" : {
    "$ref" : "#/definitions/inline_response_200"
  }
}
        ,
        "default": {
  "description" : "Unexpected error",
  "schema" : {
    "$ref" : "#/definitions/Error"
  }
}
        
        
      }
    } ,
    
    "post": {
      "summary": "",
      "description":"Creates a category. Title must be unique",
      "x-swagger-router-controller": "Categories",
      "tags": ["Categories"],
      "operationId": "categoriesPost",
      "parameters": [
        {
  "in" : "body",
  "name" : "body",
  "required" : true,
  "schema" : {
    "$ref" : "#/definitions/Category"
  }
}
        
      ],
      "responses": {
        "200": {
  "description" : "A category",
  "schema" : {
    "$ref" : "#/definitions/Category"
  }
}
        ,
        "403": {
  "description" : "Forbidden. This is returned if the oauth2 scope is anything other than \"admin\"",
  "schema" : {
    "$ref" : "#/definitions/Error"
  }
}
        ,
        "409": {
  "description" : "Error occurring when a Category with that title already exists",
  "schema" : {
    "$ref" : "#/definitions/Error"
  }
}
        ,
        "default": {
  "description" : "Unexpected error",
  "schema" : {
    "$ref" : "#/definitions/Error"
  }
}
        
        
      }
    } 
    
  } ,
  
  
  "/search": {
    
    "get": {
      "summary": "",
      "description":"Searches using the specfied parameter and returns a list of matching videos.",
      "x-swagger-router-controller": "Search",
      "tags": ["Search"],
      "operationId": "searchGet",
      "parameters": [
        {
  "name" : "search",
  "in" : "query",
  "description" : "Phrase to search by",
  "required" : false,
  "type" : "string"
}
        
      ],
      "responses": {
        "200": {
  "description" : "A list of videos",
  "schema" : {
    "$ref" : "#/definitions/inline_response_200_1"
  }
}
        ,
        "default": {
  "description" : "Unexpected error",
  "schema" : {
    "$ref" : "#/definitions/Error"
  }
}
        
        
      }
    } 
    
  } ,
  
  
  "/featured": {
    
    "get": {
      "summary": "",
      "description":"Returns a list of featured videos",
      "x-swagger-router-controller": "Featured",
      "tags": ["Featured"],
      "operationId": "featuredGet",
      "responses": {
        "200": {
  "description" : "A list of videos",
  "schema" : {
    "$ref" : "#/definitions/inline_response_200_1"
  }
}
        ,
        "default": {
  "description" : "Unexpected error",
  "schema" : {
    "$ref" : "#/definitions/Error"
  }
}
        
        
      }
    } 
    
  } ,
  
  "/featured/{video-id}": {
    
    "put": {
      "summary": "",
      "description":"Marks a video as featured.",
      "x-swagger-router-controller": "Featured",
      "tags": ["Featured"],
      "operationId": "featuredVideoIdPut",
      "parameters": [
        {
  "name" : "video-id",
  "in" : "path",
  "description" : "Video ID",
  "required" : true,
  "type" : "integer"
}
        
      ],
      "responses": {
        "204": {
  "description" : "Video has been marked as featured"
}
        ,
        "403": {
  "description" : "Forbidden. This is returned if the oauth2 scope is anything other than \"admin\"",
  "schema" : {
    "$ref" : "#/definitions/Error"
  }
}
        ,
        "default": {
  "description" : "Unexpected error",
  "schema" : {
    "$ref" : "#/definitions/Error"
  }
}
        
        
      }
    } ,
    
    "delete": {
      "summary": "",
      "description":"Removes a video as featured.",
      "x-swagger-router-controller": "Featured",
      "tags": ["Featured"],
      "operationId": "featuredVideoIdDelete",
      "parameters": [
        {
  "name" : "video-id",
  "in" : "path",
  "description" : "Video ID",
  "required" : true,
  "type" : "integer"
}
        
      ],
      "responses": {
        "204": {
  "description" : "Featured has been removed"
}
        ,
        "403": {
  "description" : "Forbidden. This is returned if the oauth2 scope is anything other than \"admin\"",
  "schema" : {
    "$ref" : "#/definitions/Error"
  }
}
        ,
        "default": {
  "description" : "Unexpected error",
  "schema" : {
    "$ref" : "#/definitions/Error"
  }
}
        
        
      }
    } 
    
  } ,
  
  
  "/trending": {
    
    "get": {
      "summary": "",
      "description":"Returns a list of trending videos",
      "x-swagger-router-controller": "Trending",
      "tags": ["Trending"],
      "operationId": "trendingGet",
      "responses": {
        "200": {
  "description" : "A list of videos",
  "schema" : {
    "$ref" : "#/definitions/inline_response_200_1"
  }
}
        ,
        "default": {
  "description" : "Unexpected error",
  "schema" : {
    "$ref" : "#/definitions/Error"
  }
}
        
        
      }
    } 
    
  } ,
  
  
  "/users": {
    
    "get": {
      "summary": "",
      "description":"Returns a list of all users.",
      "x-swagger-router-controller": "Users",
      "tags": ["Users"],
      "operationId": "usersGet",
      "responses": {
        "200": {
  "description" : "A list of users",
  "schema" : {
    "$ref" : "#/definitions/inline_response_200_2"
  }
}
        ,
        "403": {
  "description" : "Forbidden. This is returned if the oauth2 scope is anything other than \"admin\"",
  "schema" : {
    "$ref" : "#/definitions/Error"
  }
}
        ,
        "default": {
  "description" : "Unexpected error",
  "schema" : {
    "$ref" : "#/definitions/Error"
  }
}
        
        
      }
    } ,
    
    "post": {
      "summary": "",
      "description":"Creates a user.",
      "x-swagger-router-controller": "Users",
      "tags": ["Users"],
      "operationId": "usersPost",
      "parameters": [
        {
  "in" : "body",
  "name" : "body",
  "required" : true,
  "schema" : {
    "$ref" : "#/definitions/body"
  }
}
        
      ],
      "responses": {
        "200": {
  "description" : "A user",
  "schema" : {
    "$ref" : "#/definitions/User"
  }
}
        ,
        "403": {
  "description" : "Forbidden. This is returned if the oauth2 scope is anything other than \"admin\"",
  "schema" : {
    "$ref" : "#/definitions/Error"
  }
}
        ,
        "default": {
  "description" : "Unexpected error",
  "schema" : {
    "$ref" : "#/definitions/Error"
  }
}
        
        
      }
    } 
    
  } ,
  
  "/users/me/videos/unseen": {
    
    "get": {
      "summary": "",
      "description":"Gets a list of videos unseen by the current user",
      "x-swagger-router-controller": "Users",
      "tags": ["Users"],
      "operationId": "usersMeVideosUnseenGet",
      "responses": {
        "200": {
  "description" : "Unseen videos",
  "schema" : {
    "$ref" : "#/definitions/inline_response_200_1"
  }
}
        ,
        "404": {
  "description" : "User is not logged in",
  "schema" : {
    "$ref" : "#/definitions/Error"
  }
}
        
        
      }
    } 
    
  } ,
  
  "/users/guest/videos/skipped/{video-id}": {
    
    "put": {
      "summary": "",
      "description":"Marks a video as skipped for guest users",
      "x-swagger-router-controller": "Users",
      "tags": ["Users"],
      "operationId": "usersGuestVideosSkippedVideoIdPut",
      "parameters": [
        {
  "name" : "video-id",
  "in" : "path",
  "description" : "Video ID",
  "required" : true,
  "type" : "integer"
}
        
      ],
      "responses": {
        "204": {
  "description" : "Video has been marked as seen."
}
        
        
      }
    } 
    
  } ,
  
  "/users/me": {
    
    "get": {
      "summary": "",
      "description":"Gets the current user",
      "x-swagger-router-controller": "Users",
      "tags": ["Users"],
      "operationId": "usersMeGet",
      "responses": {
        "200": {
  "description" : "The user object",
  "schema" : {
    "$ref" : "#/definitions/User"
  }
}
        ,
        "404": {
  "description" : "User is not logged in",
  "schema" : {
    "$ref" : "#/definitions/Error"
  }
}
        
        
      }
    } ,
    
    "put": {
      "summary": "",
      "description":"Updates the current user.",
      "x-swagger-router-controller": "Users",
      "tags": ["Users"],
      "operationId": "usersMePut",
      "parameters": [
        {
  "in" : "body",
  "name" : "body",
  "required" : true,
  "schema" : {
    "$ref" : "#/definitions/body_1"
  }
}
        
      ],
      "responses": {
        "200": {
  "description" : "A user",
  "schema" : {
    "$ref" : "#/definitions/User"
  }
}
        ,
        "404": {
  "description" : "User is not logged in",
  "schema" : {
    "$ref" : "#/definitions/Error"
  }
}
        ,
        "default": {
  "description" : "Unexpected error",
  "schema" : {
    "$ref" : "#/definitions/Error"
  }
}
        
        
      }
    } ,
    
    "delete": {
      "summary": "",
      "description":"Deletes the current user. All oauth2 tokens for the user will be revoked",
      "x-swagger-router-controller": "Users",
      "tags": ["Users"],
      "operationId": "usersMeDelete",
      "responses": {
        "204": {
  "description" : "User has been removed"
}
        ,
        "403": {
  "description" : "Forbidden. This is returned if the oauth2 scope is anything other than \"user\"",
  "schema" : {
    "$ref" : "#/definitions/Error"
  }
}
        ,
        "default": {
  "description" : "Unexpected error",
  "schema" : {
    "$ref" : "#/definitions/Error"
  }
}
        
        
      }
    } 
    
  } ,
  
  "/users/me/videos/liked/{video-id}": {
    
    "put": {
      "summary": "",
      "description":"Marks a video as liked.",
      "x-swagger-router-controller": "Users",
      "tags": ["Users"],
      "operationId": "usersMeVideosLikedVideoIdPut",
      "parameters": [
        {
  "name" : "video-id",
  "in" : "path",
  "description" : "Video ID",
  "required" : true,
  "type" : "integer"
}
        
      ],
      "responses": {
        "204": {
  "description" : "Video has been marked as liked"
}
        ,
        "403": {
  "description" : "Forbidden. This is returned if the oauth2 scope is anything other than \"user\"",
  "schema" : {
    "$ref" : "#/definitions/Error"
  }
}
        ,
        "default": {
  "description" : "Unexpected error",
  "schema" : {
    "$ref" : "#/definitions/Error"
  }
}
        
        
      }
    } ,
    
    "delete": {
      "summary": "",
      "description":"Removes a like on a video.",
      "x-swagger-router-controller": "Users",
      "tags": ["Users"],
      "operationId": "usersMeVideosLikedVideoIdDelete",
      "parameters": [
        {
  "name" : "video-id",
  "in" : "path",
  "description" : "Video ID",
  "required" : true,
  "type" : "integer"
}
        
      ],
      "responses": {
        "204": {
  "description" : "Like has been removed"
}
        ,
        "403": {
  "description" : "Forbidden. This is returned if the oauth2 scope is anything other than \"user\"",
  "schema" : {
    "$ref" : "#/definitions/Error"
  }
}
        ,
        "default": {
  "description" : "Unexpected error",
  "schema" : {
    "$ref" : "#/definitions/Error"
  }
}
        
        
      }
    } 
    
  } ,
  
  "/users/{user-id}": {
    
    "get": {
      "summary": "",
      "description":"Returns a user for the given ID.",
      "x-swagger-router-controller": "Users",
      "tags": ["Users"],
      "operationId": "usersUserIdGet",
      "parameters": [
        {
  "name" : "user-id",
  "in" : "path",
  "description" : "User ID",
  "required" : true,
  "type" : "integer"
}
        
      ],
      "responses": {
        "200": {
  "description" : "A user",
  "schema" : {
    "$ref" : "#/definitions/User"
  }
}
        ,
        "default": {
  "description" : "Unexpected error",
  "schema" : {
    "$ref" : "#/definitions/Error"
  }
}
        
        
      }
    } ,
    
    "put": {
      "summary": "",
      "description":"Updates a user.",
      "x-swagger-router-controller": "Users",
      "tags": ["Users"],
      "operationId": "usersUserIdPut",
      "parameters": [
        {
  "in" : "body",
  "name" : "body",
  "required" : true,
  "schema" : {
    "$ref" : "#/definitions/body_2"
  }
},
        {
  "name" : "user-id",
  "in" : "path",
  "description" : "User ID",
  "required" : true,
  "type" : "integer"
}
        
      ],
      "responses": {
        "200": {
  "description" : "A user",
  "schema" : {
    "$ref" : "#/definitions/User"
  }
}
        ,
        "403": {
  "description" : "Forbidden. This is returned if the oauth2 scope is anything other than \"admin\"",
  "schema" : {
    "$ref" : "#/definitions/Error"
  }
}
        ,
        "default": {
  "description" : "Unexpected error",
  "schema" : {
    "$ref" : "#/definitions/Error"
  }
}
        
        
      }
    } 
    
  } ,
  
  "/users/me/videos/liked": {
    
    "get": {
      "summary": "",
      "description":"Gets a list of videos liked by the current user",
      "x-swagger-router-controller": "Users",
      "tags": ["Users"],
      "operationId": "usersMeVideosLikedGet",
      "responses": {
        "200": {
  "description" : "Liked videos",
  "schema" : {
    "$ref" : "#/definitions/inline_response_200_1"
  }
}
        ,
        "404": {
  "description" : "User is not logged in",
  "schema" : {
    "$ref" : "#/definitions/Error"
  }
}
        
        
      }
    } 
    
  } ,
  
  "/users/guest/videos/seen/{video-id}": {
    
    "put": {
      "summary": "",
      "description":"Marks a video as seen for guest users",
      "x-swagger-router-controller": "Users",
      "tags": ["Users"],
      "operationId": "usersGuestVideosSeenVideoIdPut",
      "parameters": [
        {
  "name" : "video-id",
  "in" : "path",
  "description" : "Video ID",
  "required" : true,
  "type" : "integer"
}
        
      ],
      "responses": {
        "204": {
  "description" : "Video has been marked as seen."
}
        
        
      }
    } 
    
  } ,
  
  "/users/me/videos/skipped": {
    
    "get": {
      "summary": "",
      "description":"Gets a list of videos skipped by the current user",
      "x-swagger-router-controller": "Users",
      "tags": ["Users"],
      "operationId": "usersMeVideosSkippedGet",
      "responses": {
        "200": {
  "description" : "Skipped videos",
  "schema" : {
    "$ref" : "#/definitions/inline_response_200_1"
  }
}
        ,
        "404": {
  "description" : "User is not logged in",
  "schema" : {
    "$ref" : "#/definitions/Error"
  }
}
        
        
      }
    } 
    
  } ,
  
  "/users/me/videos/skipped/{video-id}": {
    
    "put": {
      "summary": "",
      "description":"Marks a video as skipped.",
      "x-swagger-router-controller": "Users",
      "tags": ["Users"],
      "operationId": "usersMeVideosSkippedVideoIdPut",
      "parameters": [
        {
  "name" : "video-id",
  "in" : "path",
  "description" : "Video ID",
  "required" : true,
  "type" : "integer"
}
        
      ],
      "responses": {
        "204": {
  "description" : "Video has been marked as skipped"
}
        ,
        "403": {
  "description" : "Forbidden. This is returned if the oauth2 scope is anything other than \"user\"",
  "schema" : {
    "$ref" : "#/definitions/Error"
  }
}
        ,
        "default": {
  "description" : "Unexpected error",
  "schema" : {
    "$ref" : "#/definitions/Error"
  }
}
        
        
      }
    } 
    
  } ,
  
  "/users/me/videos/seen": {
    
    "get": {
      "summary": "",
      "description":"Gets a list of videos seen by the current user",
      "x-swagger-router-controller": "Users",
      "tags": ["Users"],
      "operationId": "usersMeVideosSeenGet",
      "responses": {
        "200": {
  "description" : "Seen videos",
  "schema" : {
    "$ref" : "#/definitions/inline_response_200_1"
  }
}
        ,
        "404": {
  "description" : "User is not logged in",
  "schema" : {
    "$ref" : "#/definitions/Error"
  }
}
        
        
      }
    } 
    
  } ,
  
  "/users/me/videos/seen/{video-id}": {
    
    "put": {
      "summary": "",
      "description":"Marks a video as seen. The video&#39;s skipped parameter will be set to false and removed from the skipped resource if present.",
      "x-swagger-router-controller": "Users",
      "tags": ["Users"],
      "operationId": "usersMeVideosSeenVideoIdPut",
      "parameters": [
        {
  "name" : "video-id",
  "in" : "path",
  "description" : "Video ID",
  "required" : true,
  "type" : "integer"
}
        
      ],
      "responses": {
        "204": {
  "description" : "Video has been marked as seen."
}
        ,
        "403": {
  "description" : "Forbidden. This is returned if the oauth2 scope is anything other than \"user\"",
  "schema" : {
    "$ref" : "#/definitions/Error"
  }
}
        ,
        "default": {
  "description" : "Unexpected error",
  "schema" : {
    "$ref" : "#/definitions/Error"
  }
}
        
        
      }
    } 
    
  } ,
  
  
  "/videos/{video-id}/streams/{stream-type}": {
    
    "get": {
      "summary": "",
      "description":"This endpoint redirects to the location of the stream. Prior to redirecting, it validates that the user meets the age requirements for streaming a video and increases the view count of a video.",
      "x-swagger-router-controller": "Streams",
      "tags": ["Streams"],
      "operationId": "videosVideoIdStreamsStreamTypeGet",
      "parameters": [
        {
  "name" : "video-id",
  "in" : "path",
  "description" : "Video ID",
  "required" : true,
  "type" : "integer"
},
        {
  "name" : "stream-type",
  "in" : "path",
  "description" : "Stream Type",
  "required" : true,
  "type" : "string",
  "enum" : [ "hls", "mp4" ]
}
        
      ],
      "responses": {
        "302": {
  "description" : "Redirect to stream location"
}
        ,
        "403": {
  "description" : "Forbidden. This is returned if the user is unauthenticated and mature_content is true or mature_content is true and the user is less than 18 years old.",
  "schema" : {
    "$ref" : "#/definitions/Error"
  }
}
        ,
        "default": {
  "description" : "Unexpected error",
  "schema" : {
    "$ref" : "#/definitions/Error"
  }
}
        
        
      }
    } 
    
  } ,
  
  "/videos/streams/transcode_notification": {
    
    "post": {
      "summary": "",
      "description":"Handles a transcode notification. This includes update the status of the stream for which the notification is for. See &lt;a href=&#39;http://docs.aws.amazon.com/elastictranscoder/latest/developerguide/notifications.html&#39;&gt;Elastic Transcoder&#39;s SNS documentation&lt;/a&gt; for POST body.",
      "x-swagger-router-controller": "Streams",
      "tags": ["Streams"],
      "operationId": "videosStreamsTranscodeNotificationPost",
      "responses": {
        "202": {
  "description" : "Image has been created or updated"
}
        ,
        "default": {
  "description" : "Unexpected error",
  "schema" : {
    "$ref" : "#/definitions/Error"
  }
}
        
        
      }
    } 
    
  } ,
  
  "/videos/{video-id}/streams": {
    
    "post": {
      "summary": "",
      "description":"Creates or updates a set of video streams and initiates transcoding for those stream. &lt;b&gt;NOTE&lt;/b&gt; The video specified by the &#39;raw_video_key&#39; must be present in S3. Usually, this matches the &#39;key&#39; returned by */videos/{video-id}/stream_transcode_request*. &lt;b&gt;NOTE&lt;/b&gt; If stream of the specified type already exists, the stream&#39;s status must be either &#39;completed&#39;, &#39;canceled&#39;, or &#39;error&#39; for the update to succeed",
      "x-swagger-router-controller": "Streams",
      "tags": ["Streams"],
      "operationId": "videosVideoIdStreamsPost",
      "parameters": [
        {
  "in" : "body",
  "name" : "body",
  "required" : true,
  "schema" : {
    "$ref" : "#/definitions/body_4"
  }
},
        {
  "name" : "video-id",
  "in" : "path",
  "description" : "Video ID",
  "required" : true,
  "type" : "integer"
}
        
      ],
      "responses": {
        "202": {
  "description" : "Stream has been accepted for transcoding"
}
        ,
        "400": {
  "description" : "Error occurring when the key specified does not exist in S3",
  "schema" : {
    "$ref" : "#/definitions/Error"
  }
}
        ,
        "409": {
  "description" : "Error occuring when a stream of that type for that video is in a 'pending' state",
  "schema" : {
    "$ref" : "#/definitions/Error"
  }
}
        ,
        "default": {
  "description" : "Unexpected error",
  "schema" : {
    "$ref" : "#/definitions/Error"
  }
}
        
        
      }
    } 
    
  } ,
  
  "/videos/{video-id}/raw_stream_upload_request": {
    
    "get": {
      "summary": "",
      "description":"This endpoint returns the S3 upload details for client side uploading of a raw stream video for transcoding. See &lt;a href=&#39;http://docs.aws.amazon.com/AmazonS3/latest/dev/UsingHTTPPOST.html&#39;&gt;AWS&#39;s browser based upload documentation&lt;/a&gt; for more details.",
      "x-swagger-router-controller": "Streams",
      "tags": ["Streams"],
      "operationId": "videosVideoIdRawStreamUploadRequestGet",
      "parameters": [
        {
  "name" : "video-id",
  "in" : "path",
  "description" : "Video ID",
  "required" : true,
  "type" : "integer"
},
        {
  "name" : "filename",
  "in" : "query",
  "description" : "Filename of file to be uploaded. Must contain only lowercase letters, numbers, hyphens (-), and periods (.). Must start and end with a letter or number. Max length of 25.",
  "required" : true,
  "type" : "string"
}
        
      ],
      "responses": {
        "200": {
  "description" : "S3 upload details",
  "schema" : {
    "$ref" : "#/definitions/inline_response_200_3"
  }
}
        ,
        "403": {
  "description" : "Forbidden. This is returned if the oauth2 scope is anything other than \"admin\"",
  "schema" : {
    "$ref" : "#/definitions/Error"
  }
}
        ,
        "default": {
  "description" : "Unexpected error",
  "schema" : {
    "$ref" : "#/definitions/Error"
  }
}
        
        
      }
    } 
    
  } ,
  
  
  "/videos": {
    
    "get": {
      "summary": "",
      "description":"Returns a list of videos ordered by created_at. At most 1000 videos will be returned. For an oauth2 scope of &#39;admin&#39;, this includes all videos. For oauth2 scope of &#39;user&#39; or unauthenticated clients, this includes only videos with &#39;visible&#39; set to true. &lt;b&gt;NOTE&lt;/b&gt;  If the user is unauthenticated and mature_content is true or mature_content is true and the user is less than 18 years old, streams will be null.",
      "x-swagger-router-controller": "Videos",
      "tags": ["Videos"],
      "operationId": "videosGet",
      "parameters": [
        {
  "name" : "category",
  "in" : "query",
  "description" : "Filters videos by category",
  "required" : false,
  "type" : "string"
},
        {
  "name" : "tags",
  "in" : "query",
  "description" : "Filters videos by tags. Comma separated list of tags.",
  "required" : false,
  "type" : "string"
},
        {
  "name" : "created_before",
  "in" : "query",
  "description" : "Filters videos by created_at date. Videos that have a date before the one specified will be returned.`",
  "required" : false,
  "type" : "string",
  "format" : "date-time"
},
        {
  "name" : "created_after",
  "in" : "query",
  "description" : "Filters videos by created_at date. Videos that have a date after the one specified will be returned.",
  "required" : false,
  "type" : "string",
  "format" : "date-time"
},
        {
  "name" : "visible",
  "in" : "query",
  "description" : "Filter videos that are marked as not visible. If client is unauthenticated or has a token with a scope of 'user', the videos returned will only contain the \"id\" attribute of each video.",
  "required" : false,
  "type" : "boolean"
},
        {
  "name" : "deleted",
  "in" : "query",
  "description" : "Filter videos that have been deleted. The videos returned will only contain the \"id\" attribute of each video.",
  "required" : false,
  "type" : "boolean"
}
        
      ],
      "responses": {
        "200": {
  "description" : "An list of videos",
  "schema" : {
    "$ref" : "#/definitions/inline_response_200_1"
  }
}
        ,
        "default": {
  "description" : "Unexpected error",
  "schema" : {
    "$ref" : "#/definitions/Error"
  }
}
        
        
      }
    } ,
    
    "post": {
      "summary": "",
      "description":"Creates a video",
      "x-swagger-router-controller": "Videos",
      "tags": ["Videos"],
      "operationId": "videosPost",
      "parameters": [
        {
  "in" : "body",
  "name" : "body",
  "required" : true,
  "schema" : {
    "$ref" : "#/definitions/body_3"
  }
}
        
      ],
      "responses": {
        "201": {
  "description" : "A video",
  "schema" : {
    "$ref" : "#/definitions/inline_response_201"
  }
}
        ,
        "403": {
  "description" : "Forbidden. This is returned if the oauth2 scope is anything other than \"admin\"",
  "schema" : {
    "$ref" : "#/definitions/Error"
  }
}
        ,
        "default": {
  "description" : "Unexpected error",
  "schema" : {
    "$ref" : "#/definitions/Error"
  }
}
        
        
      }
    } 
    
  } ,
  
  "/videos/{video-id}/hero_image": {
    
    "post": {
      "summary": "",
      "description":"Creates or updates the hero image for a video. This is a multipart/form-data POST.",
      "x-swagger-router-controller": "Videos",
      "tags": ["Videos"],
      "operationId": "videosVideoIdHeroImagePost",
      "parameters": [
        {
  "name" : "video-id",
  "in" : "path",
  "description" : "Video ID",
  "required" : true,
  "type" : "integer"
}
        
      ],
      "responses": {
        "202": {
  "description" : "Image has been created or updated"
}
        ,
        "default": {
  "description" : "Unexpected error",
  "schema" : {
    "$ref" : "#/definitions/Error"
  }
}
        
        
      }
    } 
    
  } ,
  
  "/videos/{video-id}": {
    
    "get": {
      "summary": "",
      "description":"Returns a video for the given ID. If the user is unauthenticated and mature_content is true or mature_content is true and the user is less than 18 years old, streams will be null.",
      "x-swagger-router-controller": "Videos",
      "tags": ["Videos"],
      "operationId": "videosVideoIdGet",
      "parameters": [
        {
  "name" : "video-id",
  "in" : "path",
  "description" : "Video ID",
  "required" : true,
  "type" : "integer"
}
        
      ],
      "responses": {
        "200": {
  "description" : "A video",
  "schema" : {
    "$ref" : "#/definitions/Video"
  }
}
        ,
        "403": {
  "description" : "Forbidden. This is returned if the client is unauthenticated or has a 'user' scope and the video's visible property is not set to true",
  "schema" : {
    "$ref" : "#/definitions/Error"
  }
}
        ,
        "default": {
  "description" : "Unexpected error",
  "schema" : {
    "$ref" : "#/definitions/Error"
  }
}
        
        
      }
    } ,
    
    "put": {
      "summary": "",
      "description":"Updates a video. The &#39;streams&#39; and &#39;hero_image_link&#39; properties are ignored.",
      "x-swagger-router-controller": "Videos",
      "tags": ["Videos"],
      "operationId": "videosVideoIdPut",
      "parameters": [
        {
  "in" : "body",
  "name" : "body",
  "required" : true,
  "schema" : {
    "$ref" : "#/definitions/Video"
  }
},
        {
  "name" : "video-id",
  "in" : "path",
  "description" : "Video ID",
  "required" : true,
  "type" : "integer"
}
        
      ],
      "responses": {
        "200": {
  "description" : "A video",
  "schema" : {
    "$ref" : "#/definitions/Video"
  }
}
        ,
        "403": {
  "description" : "Forbidden. This is returned if the oauth2 scope is anything other than \"admin\""
}
        ,
        "default": {
  "description" : "Unexpected error",
  "schema" : {
    "$ref" : "#/definitions/Error"
  }
}
        
        
      }
    } ,
    
    "delete": {
      "summary": "",
      "description":"Deletes a video",
      "x-swagger-router-controller": "Videos",
      "tags": ["Videos"],
      "operationId": "videosVideoIdDelete",
      "parameters": [
        {
  "name" : "video-id",
  "in" : "path",
  "description" : "Video ID",
  "required" : true,
  "type" : "integer"
}
        
      ],
      "responses": {
        "204": {
  "description" : "Successfully deleted"
}
        ,
        "403": {
  "description" : "Forbidden. This is returned if the oauth2 scope is anything other than \"admin\"",
  "schema" : {
    "$ref" : "#/definitions/Error"
  }
}
        ,
        "default": {
  "description" : "Unexpected error",
  "schema" : {
    "$ref" : "#/definitions/Error"
  }
}
        
        
      }
    } 
    
  } 
  
  }, "definitions": {
  "Video": {
  "required" : [ "category_id", "description", "title" ],
  "properties" : {
    "id" : {
      "type" : "integer",
      "format" : "int32",
      "description" : "Unique identifier representing a specific video",
      "readOnly" : true
    },
    "created_at" : {
      "type" : "string",
      "format" : "date-time",
      "readOnly" : true
    },
    "updated_at" : {
      "type" : "string",
      "format" : "date-time",
      "readOnly" : true
    },
    "title" : {
      "type" : "string",
      "description" : "Title of video."
    },
    "description" : {
      "type" : "string",
      "description" : "Description of video."
    },
    "mature_content" : {
      "type" : "boolean",
      "description" : "Boolean indicating if the video contains mature content",
      "default" : false
    },
    "category_id" : {
      "type" : "integer",
      "format" : "int32",
      "description" : "Unique identifier of category"
    },
    "visible" : {
      "type" : "boolean",
      "description" : "Whether a video is visible. This property is only visible to clients with an oauth2 scope of 'admin'"
    },
    "tag_list" : {
      "type" : "string",
      "description" : "Comma seperated list of tags associated with video."
    },
    "streams" : {
      "type" : "array",
      "items" : {
        "$ref" : "#/definitions/Stream"
      }
    },
    "hero_image_link" : {
      "type" : "string",
      "description" : "Image URL representing the video."
    },
    "liked" : {
      "type" : "boolean",
      "description" : "Boolean representing whether the current user has liked the video. This property is not present for unauthenticated clients.",
      "readOnly" : true,
      "default" : false
    },
    "seen" : {
      "type" : "boolean",
      "description" : "Boolean representing whether the current user has seen the video. This property is not present for unauthenticated clients.",
      "readOnly" : true,
      "default" : false
    },
    "skipped" : {
      "type" : "boolean",
      "description" : "Boolean representing whether the current user has skipped the video. This property is not present for unauthenticated clients.",
      "readOnly" : true,
      "default" : false
    },
    "view_count" : {
      "type" : "integer",
      "format" : "int32",
      "description" : "View count. <b>NOTE</b> This only visible if oauth2 scope is \"admin\".\n",
      "readOnly" : true
    },
    "skip_count" : {
      "type" : "integer",
      "format" : "int32",
      "description" : "View count. <b>NOTE</b> This only visible if oauth2 scope is \"admin\".\n",
      "readOnly" : true
    }
  }
},"Category": {
  "required" : [ "title" ],
  "properties" : {
    "id" : {
      "type" : "integer",
      "format" : "int32",
      "description" : "Unique identifier representing a specific category",
      "readOnly" : true
    },
    "title" : {
      "type" : "string",
      "description" : "Title of category"
    }
  }
},"Stream": {
  "required" : [ "link", "stream_type", "transcode_status" ],
  "properties" : {
    "link" : {
      "type" : "string",
      "description" : "URL of stream."
    },
    "stream_type" : {
      "type" : "string",
      "description" : "Type of stream.",
      "enum" : [ "hls", "mp4" ]
    },
    "transcode_status" : {
      "type" : "string",
      "description" : "Transcode status. This property is only visible to oauth2 scope of \"admin\"",
      "readOnly" : true,
      "enum" : [ "pending", "submitted", "progressing", "completed", "canceled", "error" ]
    }
  }
},"User": {
  "required" : [ "birthday", "email", "password" ],
  "properties" : {
    "id" : {
      "type" : "integer",
      "format" : "int32",
      "description" : "Unique identifier representing a specific video",
      "readOnly" : true
    },
    "email" : {
      "type" : "string",
      "description" : "Email of user"
    },
    "password" : {
      "type" : "string",
      "description" : "Password of user. This is omitted from any endpoint returns"
    },
    "birthday" : {
      "type" : "string",
      "format" : "date-time",
      "description" : "Birthday of user. <a href=\"http://xml2rfc.ietf.org/public/rfc/html/rfc3339.html#anchor14\">ISO-8061 date-time</a>. Timezone is UTC"
    }
  }
},"Error": {
  "properties" : {
    "code" : {
      "type" : "integer",
      "format" : "int32"
    },
    "message" : {
      "type" : "string"
    }
  }
},"inline_response_200": {
  "properties" : {
    "data" : {
      "type" : "array",
      "items" : {
        "$ref" : "#/definitions/Category"
      }
    }
  }
},"inline_response_200_1": {
  "properties" : {
    "data" : {
      "type" : "array",
      "items" : {
        "$ref" : "#/definitions/Video"
      }
    }
  }
},"inline_response_200_2": {
  "properties" : {
    "data" : {
      "type" : "array",
      "items" : {
        "$ref" : "#/definitions/User"
      }
    }
  }
},"body": {
  "type" : "object",
  "properties" : {
    "user" : {
      "$ref" : "#/definitions/User"
    }
  }
},"body_1": {
  "type" : "object",
  "properties" : {
    "user" : {
      "$ref" : "#/definitions/User"
    }
  }
},"body_2": {
  "type" : "object",
  "properties" : {
    "user" : {
      "$ref" : "#/definitions/User"
    }
  }
},"body_3": {
  "required" : [ "category_id", "description", "mature_content", "title" ],
  "properties" : {
    "title" : {
      "type" : "string",
      "description" : "Title of video."
    },
    "category_id" : {
      "type" : "integer",
      "format" : "int32",
      "description" : "Unique identifier of category"
    },
    "description" : {
      "type" : "string",
      "description" : "Description of video."
    },
    "mature_content" : {
      "type" : "boolean",
      "description" : "Boolean indicating if the video contains mature content",
      "default" : false
    },
    "tag_list" : {
      "type" : "string",
      "description" : "Comma seperated list of tags associated with video."
    }
  }
},"inline_response_201": {
  "properties" : {
    "mature_content" : {
      "type" : "boolean",
      "description" : "Boolean indicating if the video contains mature content",
      "default" : false
    },
    "category_id" : {
      "type" : "integer",
      "format" : "int32",
      "description" : "Unique identifier of category"
    },
    "updated_at" : {
      "type" : "string",
      "format" : "date-time",
      "readOnly" : true
    },
    "tag_list" : {
      "type" : "string",
      "description" : "Comma seperated list of tags associated with video."
    },
    "created_at" : {
      "type" : "string",
      "format" : "date-time",
      "readOnly" : true
    },
    "description" : {
      "type" : "string",
      "description" : "Description of video."
    },
    "id" : {
      "type" : "integer",
      "format" : "int32",
      "description" : "Unique identifier representing a specific video",
      "readOnly" : true
    },
    "title" : {
      "type" : "string",
      "description" : "Title of video."
    }
  }
},"inline_response_200_3": {
  "properties" : {
    "aws_access_key_id" : {
      "type" : "string",
      "description" : "Upload AWS access key id"
    },
    "signature" : {
      "type" : "string",
      "description" : "Upload signature"
    },
    "acl" : {
      "type" : "string",
      "description" : "Upload acl"
    },
    "key" : {
      "type" : "string",
      "description" : "Upload key. S3 bucket key to store uploaded video in"
    },
    "policy" : {
      "type" : "string",
      "description" : "Upload policy"
    }
  }
},"body_4": {
  "properties" : {
    "key" : {
      "type" : "string",
      "description" : "S3 bucket key for raw video."
    }
  }
}
  }
}
