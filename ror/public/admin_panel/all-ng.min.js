"use strict";
function AppCtrl(e, t, n, r) {
    e.title = "Cizo", e.versionAPI = "v1", e.hostName = "http://staging.cizo.com", applicationStart(t, n, r)
}
function applicationStart(e, t, n) {
    e.configureStates(t), n.go("main")
}
function initServ(e) {
    e.info("services initialized")
}
function init_templates() {
    return "dummy"
}
function _lodash(e) {
    return _
}
function _moment(e) {
    return moment
}
function routerHelperProvider(e, t, n) {
    function r(e) {
        function r(e, r) {
            e.forEach(function (e) {
                t.state(e.state, e.config)
            }), r && !a && (a = !0, n.otherwise(r))
        }

        function o() {
            return e.get()
        }

        var a = !1;
        return {configureStates: r, getStates: o}
    }

    this.$get = r, r.$inject = ["$state"]
}
function player(e, t) {
    function n() {
    }

    function r(r, o, a) {
        function i() {
            var t = angular.element(document.querySelector("video.screen"))[0], n = angular.element(document.querySelector("div.play-button span"))[0];
            t.paused ? (t.play(), e.info("start playing"), n.classList.add("glyphicon-play"), n.classList.remove("glyphicon-pause"), r.$apply()) : (t.pause(), e.info("set to pause"), n.classList.add("glyphicon-pause"), n.classList.remove("glyphicon-play"), r.$apply())
        }

        var s = angular.element(document.querySelector("video.screen"));
        s.on("click", n), s.on("timeupdate", function () {
            r.timePassed = t().startOf("year").add(s[0].currentTime, "s").format("mm:ss"), r.duration = t().startOf("year").add(s[0].duration, "s").format("mm:ss"), r.$apply()
        });
        var l = angular.element(document.querySelector("div.play-button span"));
        l.on("click", i)
    }

    return {restrict: "E", templateUrl: "components/player/player.html", link: r, transclude: !0, scope: {width: "@"}}
}
function sidebar(e) {
    function t(t) {
        e.info("linked")
    }

    return {restrict: "E", templateUrl: "components/sidebar/sidebar.html", link: t, transclude: !0, scope: {}}
}
function uploader(e, t, n, r, o) {
    function a(a, i) {
        var s = angular.element(document.querySelector(".drop-zone"));
        t.each(a, function (t) {
            var a = 3e3;
            return "video/mp4" !== t.type ? (e.warn("Unsupported file format"), s.text("Unsupported file format"), s.addClass("error"), void n(function () {
                s.text("Click to select file for uploading"), s.removeClass("error")
            }, a)) : (Number(o.id) && r.sendRequest(Number(o.id), t.name, i.hostLink).then(function (t) {
                i.postData = {
                    url: t.data.url,
                    key: t.data.key,
                    expires: t.data.Expires,
                    policy: t.data.policy,
                    credential: t.data["x-amz-credential"],
                    algorithm: t.data["x-amz-algorithm"],
                    date: t.data["x-amz-date"],
                    token: t.data["x-amz-security-token"],
                    signature: t.data["x-amz-signature"]
                }, n(function () {
                    var t = document.querySelector("form");
                    t[0].onsubmit = function () {
                        e.info("before send streams"), r.sendStreams(Number(o.id), i.hostLink), e.info("after send streams")
                    }, t.submit()
                }, 800)
            }), void s[0].classList.remove("drop"))
        })
    }

    function i(e) {
        var t = angular.element(document.querySelector(".drop-zone")), n = angular.element(document.querySelector(".file-input"));
        t.on("click", function () {
            var e = angular.element(document.querySelector(".file-input"));
            e[0].click()
        }), t.on("dragover", function (e) {
            return e.preventDefault(), t[0].classList.add("hover"), !1
        }), t.on("dragleave", function (e) {
            return e.preventDefault(), t[0].classList.remove("hover"), !1
        }), t.on("drop", function (n) {
            if (n.stopPropagation(), n.preventDefault(), t[0].classList.remove("hover"), t[0].classList.add("drop"), n && n.dataTransfer && n.dataTransfer.files) {
                var r = n.dataTransfer.files;
                a(r, e)
            }
            return !1
        }), n.on("change", function () {
            var t = angular.element(document.querySelector(".file-input"))[0].files;
            a(t, e)
        })
    }

    return {
        restrict: "E",
        templateUrl: "components/uploader/uploader.html",
        link: i,
        transclude: !0,
        scope: {hostLink: "=link", postData: "@"}
    }
}
function uploaderServ(e, t, n) {
    function r(r, o, a) {
        return t(function (t, i) {
            function s(e) {
                n.info("request data received"), n.info(JSON.stringify(e)), t(e)
            }

            function l(e) {
                n.info("request data receiving error with status " + e.status), i(e)
            }

            e({method: "GET", url: a + "/videos/" + r + "/raw_stream_upload_request", params: {filename: o}}).then(s, l)
        })
    }

    return {sendRequest: r}
}
function CategoriesCtrl(e, t, n, r) {
    r.getCategoriesList(e).then(function (n) {
        e.categoriesList = n.data, t.info("data received")
    }, function (e) {
        t.error("receiving error happened: " + e)
    }), e.deleteCategory = function (t) {
        r.deleteCategory(e, t).then(function () {
            n.go(n.current, {}, {reload: !0})
        })
    }
}
function CategoryCtrl(e, t, n, r, o) {
    e.screenTitle = Number(r.id) > 0 ? "Edit" : "Create", Number(r.id) && o.getCategory(e, r.id).then(function (n) {
        e.categoryItem = n.data, t.info("data received")
    }, function (e) {
        t.error("receiving error happened: " + e)
    }), e.updateCategory = function () {
        Number(r.id) ? o.setCategory(e, r.id, e.categoryItem).then(function () {
            t.info("successfully sent"), n.go("categories")
        }, function (e) {
            t.info("error happened with status " + e.status)
        }) : o.makeCategory(e, e.categoryItem).then(function () {
            n.go("categories")
        })
    }
}
function categoriesServ(e, t, n) {
    function r(r) {
        return t(function (t, o) {
            function a(e) {
                n.info("categories list obtained"), t(e)
            }

            function i(e) {
                n.info("categories list obtaining error with status " + e.status), o(e)
            }

            e({method: "GET", url: r.hostName + "/categories"}).then(a, i)
        })
    }

    function o(r, o) {
        return t(function (t, a) {
            function i(e) {
                n.info("category data created"), t(e)
            }

            function s(e) {
                n.info("category data creation error with status " + e.status), a(e)
            }

            e({method: "POST", url: r.hostName + "/categories", data: o}).then(i, s)
        })
    }

    function a(r, o) {
        return t(function (t, a) {
            function i(e) {
                n.info("category data delivered"), t(e)
            }

            function s(e) {
                n.info("category data getting error with status " + e.status), a(e)
            }

            e({method: "GET", url: r.hostName + "/categories/" + o}).then(i, s)
        })
    }

    function i(r, o, a) {
        return t(function (t, i) {
            function s(e) {
                n.info("category data updated"), t(e)
            }

            function l(e) {
                n.info("category data updating error with status " + e.status), i(e)
            }

            e({method: "PUT", url: r.hostName + "/categories/" + o, data: a}).then(s, l)
        })
    }

    function s(r, o) {
        return t(function (t, a) {
            function i(e) {
                n.info("category data deleted"), t(e)
            }

            function s(e) {
                n.info("category data deleting error with status " + e.status), a(e)
            }

            e({method: "DELETE", url: r.hostName + "/categories/" + o}).then(i, s)
        })
    }

    return {getCategoriesList: r, makeCategory: o, getCategory: a, setCategory: i, deleteCategory: s}
}
function ContentCtrl(e, t, n, r) {
    r.getVideosList(e).then(function (n) {
        e.videosList = n.data.data, t.info("data received")
    }, function (e) {
        t.error("receiving error happened: " + e)
    }), e.deleteVideo = function (t) {
        r.deleteVideo(e, t).then(function () {
            n.go(n.current, {}, {reload: !0})
        })
    }
}
function MainCtrl(e, t) {
    e.trending = "Trending", e.categories = "Categories", e.videos = "Videos"
}
function UploadCtrl(e, t) {
}
function VideoCtrl(e, t, n, r, o) {
    e.mpaaRatingList = ["G", "PG", "PG-13", "R", "NC-17"], e.screenTitle = Number(r.id) > 0 ? "Edit" : "Create", e.hostNameUpload = e.hostName, Number(r.id) ? o.getVideo(e, r.id).then(function (n) {
        e.videoItem = n.data, e.createdDate = moment(e.videoItem.created_at).format("MM.DD.YYYY HH:mm"), e.updatedDate = moment(e.videoItem.updated_at).format("MM.DD.YYYY HH:mm"), t.info("data received")
    }, function (e) {
        t.error("receiving error happened: " + e)
    }) : (e.createdDate = moment().format("MM.DD.YYYY HH:mm"), e.updatedDate = moment().format("MM.DD.YYYY HH:mm")), e.updateVideo = function () {
        Number(r.id) ? o.setVideo(e, r.id, e.videoItem).then(function () {
            t.info("successfully sent"), n.go("content")
        }, function (e) {
            t.info("error happened with status " + e.status)
        }) : (e.videoItem.created_at = new Date, e.videoItem.updated_at = new Date, e.videoItem.category_id = "0", e.videoItem.tags = [], o.makeVideo(e, e.videoItem).then(function () {
            n.go("content")
        }))
    }, e.updateStreams = function () {
        o.sendStreams(e, r.id)
    }
}
function videoServ(e, t, n) {
    function r(r) {
        return t(function (t, o) {
            function a(e) {
                n.info("video list obtained"), t(e)
            }

            function i(e) {
                n.info("video list obtaining error with status " + e.status), o(e)
            }

            e({method: "GET", url: r.hostName + "/videos"}).then(a, i)
        })
    }

    function o(r, o) {
        return t(function (t, a) {
            function i(e) {
                n.info("video data created"), t(e)
            }

            function s(e) {
                n.info("video data creation error with status " + e.status), a(e)
            }

            e({method: "POST", url: r.hostName + "/videos", data: o}).then(i, s)
        })
    }

    function a(r, o) {
        return t(function (t, a) {
            function i(e) {
                n.info("video data delivered"), t(e)
            }

            function s(e) {
                n.info("video data getting error with status " + e.status), a(e)
            }

            e({method: "GET", url: r.hostName + "/videos/" + o}).then(i, s)
        })
    }

    function i(r, o, a) {
        return t(function (t, i) {
            function s(e) {
                n.info("video data updated"), t(e)
            }

            function l(e) {
                n.info("video data updating error with status " + e.status), i(e)
            }

            e({method: "PUT", url: r.hostName + "/videos/" + o, data: a}).then(s, l)
        })
    }

    function s(r, o) {
        return t(function (t, a) {
            function i(e) {
                n.info("video data deleted"), t(e)
            }

            function s(e) {
                n.info("video data deleting error with status " + e.status), a(e)
            }

            e({method: "DELETE", url: r.hostName + "/videos/" + o}).then(i, s)
        })
    }

    function l(r, o, a) {
        var i = new FormData, s = i.append("heroImage", a);
        return t(function (t, a) {
            function i(e) {
                n.info("hero image uploaded"), t(e)
            }

            function l(e) {
                n.info("hero image uploading error with status " + e.status), a(e)
            }

            e({method: "POST", url: r.hostName + "/videos/" + o + "/heroimage", data: s}).then(i, l)
        })
    }

    function d(r, o) {
        return t(function (t, a) {
            function i(e) {
                n.info("streams called"), n.info(JSON.stringify(e)), t(e)
            }

            function s(e) {
                n.info("streams call receiving error with status " + e.status), a(e)
            }

            e({method: "POST", url: r.hostName + "/videos/" + o + "/streams"}).then(i, s)
        })
    }

    return {
        getVideosList: r,
        makeVideo: o,
        getVideo: a,
        setVideo: i,
        deleteVideo: s,
        uploadHeroImage: l,
        sendStreams: d
    }
}
function WatchCtrl(e, t, n, r) {
    var o;
    t.link && (o = n.trustAs(n.RESOURCE_URL, t.link.replace(/%2F/g, "/"))), e.page = "Watch", e.playerSettings = {
        width: r.innerWidth,
        link: o
    }
}
angular.module("app", ["app.services", "app.controls", "app.directives", "app.routerHelper", "app.wrappers", "app.routes", "ngSanitize", "templates"]).controller("AppCtrl", AppCtrl), AppCtrl.$inject = ["$scope", "routerHelper", "routesList", "$state"], angular.module("app.services", []).factory("initServ", initServ), initServ.$inject = ["$log"], angular.module("templates", []).constant("init", init_templates), angular.module("app.helpers", []).factory("RecursionHelper", ["$compile", function (e) {
    return {
        compile: function (t, n) {
            angular.isFunction(n) && (n = {post: n});
            var r, o = t.contents().remove();
            return {
                pre: n && n.pre ? n.pre : null, post: function (t, a) {
                    r || (r = e(o)), r(t, function (e) {
                        a.append(e)
                    }), n && n.post && n.post.apply(null, arguments)
                }
            }
        }
    }
}]), angular.module("templates").run(["$templateCache", function (e) {
    e.put("components/player/player.html", '<div class="container">\r\n    <video class="screen" width="{{width}}" autoplay  ng-transclude></video>\r\n    <div class="like-button">\r\n        <span class="glyphicon glyphicon-heart-empty"></span>\r\n    </div>\r\n    <div class="play-button">\r\n        <span class="glyphicon glyphicon-play"></span>\r\n    </div>\r\n    <div class="info-panel">\r\n        <span>{{timePassed}} / {{duration}}</span>\r\n    </div>\r\n</div>'), e.put("components/sidebar/sidebar.html", '<h1>\r\n    <a href="#/">\r\n        <img src="images/cizo-logo.svg" alt="Cizo">\r\n\r\n    </a>\r\n    <span>Admin Panel</span>\r\n</h1>\r\n\r\n<ul ng-transclude class="menu-list"></ul>'), e.put("components/uploader/uploader.html", '<div class="drop-zone">\r\n    Click to select file for uploading\r\n</div>\r\n<form action="https://cizo-assets.s3.amazonaws.com" method="post" enctype="multipart/form-data">\r\n    <input name="key" ng-model="postData.key" class="hidden">\r\n    <input name="Expires" ng-model="postData.expires" class="hidden-field">\r\n    <input name="policy" ng-model="postData.policy" class="hidden-field">\r\n    <input name="x-amz-credential" ng-model="postData.credential" class="hidden-field">\r\n    <input name="x-amz-algorithm" ng-model="postData.algorithm" class="hidden-field">\r\n    <input name="x-amz-date" ng-model="postData.date" class="hidden-field">\r\n    <input name="x-amz-security-token" ng-model="postData.token" class="hidden-field">\r\n    <input name="x-amz-signature" ng-model="postData.signature" class="hidden-field">\r\n\r\n    <input type="file" class="file-input"   name="file" />\r\n</form>'), e.put("views/categories/categories.html", '<div>\r\n    <h2>Categories</h2>\r\n    <div>\r\n\r\n        <button class="btn btn-lg" ui-sref="category({id: 0})">Add category</button>\r\n\r\n        <div class="list-group">\r\n            <div class="list-group-item" ng-repeat="item in categoriesList">\r\n                <div class="list-group-item-heading">{{item.title}}</div>\r\n                <a ui-sref="category({id: item.id })">Edit</a>\r\n                <a ng-click="deleteCategory(item.id)">Delete</a>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>'), e.put("views/categories/category.html", '<div class="container">\r\n    <h2>{{screenTitle}} Category</h2>\r\n    <div class="row">\r\n        <div class="col-sm-8">\r\n            <div class="row">\r\n                <label class="col-md-offset-3 col-sm-3">Title</label>\r\n                <input class="col-sm-6" ng-model="categoryItem.title" required>\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n    <button ng-click="updateCategory()">Update category</button>\r\n\r\n</div>'), e.put("views/content/content.html", '<div>\r\n    <h2>Videos</h2>\r\n    <div>\r\n\r\n        <button class="btn btn-lg" ui-sref="video({id: 0})">Add video</button>\r\n\r\n        <div class="list-group">\r\n            <div class="list-group-item" ng-repeat="movie in videosList">\r\n                <div class="list-group-item-heading">{{movie.title}}</div>\r\n                <div class="list-group-item-text">{{movie.description}}</div>\r\n                {{movie.streams.link}}\r\n                <a ui-sref="video({id: movie.id })">Edit</a>\r\n                <a ng-click="deleteVideo(movie.id)">Delete</a>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>'), e.put("views/main/main.html", '<div>\r\n    <div class="btn-group-vertical">\r\n\r\n    </div>\r\n</div>'), e.put("views/upload/upload.html", '<h1>Upload video</h1>\r\n\r\n<uploader></uploader>\r\n\r\n<button class="btn btn-lg btn-success" ui-sref="content">Apply</button>\r\n<button class="btn btn-lg btn-danger" ui-sref="content">Cancel</button>'), e.put("views/video/video.html", '<div class="container">\r\n    <h2>{{::screenTitle}} Video</h2>\r\n    <div class="row">\r\n        <div class="col-sm-8">\r\n            <div class="row">\r\n                <label class="col-md-offset-3 col-sm-3">Created</label>\r\n                <span class="col-sm-6">{{::createdDate}}</span>\r\n            </div>\r\n            <div class="row">\r\n                <label class="col-md-offset-3 col-sm-3">Last Update</label>\r\n                <span class="col-sm-6">{{::updatedDate}}</span>\r\n            </div>\r\n            <div class="row">\r\n                <label class="col-md-offset-3 col-sm-3">Title</label>\r\n                <input class="col-sm-6" ng-model="videoItem.title" required>\r\n            </div>\r\n            <div class="row">\r\n                <label class="col-md-offset-3 col-sm-3">Description</label>\r\n                <textarea class="col-sm-6" ng-model="videoItem.description" required></textarea>\r\n            </div>\r\n            <div class="row">\r\n                <label class="col-md-offset-3 col-sm-3">Rating</label>\r\n                <select class="col-sm-6" ng-model="videoItem.mpaa_rating" ng-options="rate for rate in mpaaRatingList" required></select>\r\n            </div>\r\n        </div>\r\n        <div class="col-sm-4">\r\n            <div class="row">\r\n                <uploader link="hostNameUpload"></uploader>\r\n            </div>\r\n            <div class="row">\r\n                <button ng-click="updateStreams()">Upload streams</button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n   <button ng-click="updateVideo()">Update video</button>\r\n\r\n</div>'), e.put("views/watch/watch.html", '<!--<video autoplay preload="auto" width="{{playerSettings.width}}">\r\n    <source src="{{playerSettings.link}}">\r\n</video>-->\r\n\r\n<player width="{{playerSettings.width}}">\r\n    <source src="{{playerSettings.link}}">\r\n</player>')
}]), angular.module("app.wrappers", []).factory("lodash", _lodash), _lodash.$inject = ["$log"], angular.module("app.wrappers").factory("moment", _moment), _moment.$inject = ["$log"], angular.module("app.routerHelper", ["ui.router"]).provider("routerHelper", routerHelperProvider), routerHelperProvider.$inject = ["$locationProvider", "$stateProvider", "$urlRouterProvider"], angular.module("app.routes", []).constant("routesList", [{
    state: "main",
    config: {url: "/", templateUrl: "views/main/main.html", controller: "MainCtrl", controllerAs: "main"}
}, {
    state: "content",
    config: {
        url: "/content",
        templateUrl: "views/content/content.html",
        controller: "ContentCtrl",
        controllerAs: "content"
    }
}, {
    state: "video",
    config: {url: "/video/:id", templateUrl: "views/video/video.html", controller: "VideoCtrl", controllerAs: "video"}
}, {
    state: "upload",
    config: {
        url: "/upload/:id",
        templateUrl: "views/upload/upload.html",
        controller: "UploadCtrl",
        controllerAs: "upload"
    }
}, {
    state: "categories",
    config: {
        url: "/categories",
        templateUrl: "views/categories/categories.html",
        controller: "CategoriesCtrl",
        controllerAs: "categories"
    }
}, {
    state: "category",
    config: {
        url: "/category/:id",
        templateUrl: "views/categories/category.html",
        controller: "CategoryCtrl",
        controllerAs: "category"
    }
}]), angular.module("app.directives", ["app.services"]).directive("player", player), player.$inject = ["$log", "moment"], angular.module("app.directives").directive("sidebar", sidebar), sidebar.$inject = ["$log"], angular.module("app.directives").directive("uploader", uploader), uploader.$inject = ["$log", "lodash", "$timeout", "uploaderServ", "$stateParams"], angular.module("app.services").factory("uploaderServ", uploaderServ), uploaderServ.$inject = ["$http", "$q", "$log"], angular.module("app.controls", ["ngSanitize"]).controller("CategoriesCtrl", CategoriesCtrl), CategoriesCtrl.$inject = ["$scope", "$log", "$state", "categoriesServ"], angular.module("app.controls").controller("CategoryCtrl", CategoryCtrl), CategoryCtrl.$inject = ["$scope", "$log", "$state", "$stateParams", "categoriesServ"], angular.module("app.services").factory("categoriesServ", categoriesServ), categoriesServ.$inject = ["$http", "$q", "$log"], angular.module("app.controls").controller("ContentCtrl", ContentCtrl), ContentCtrl.$inject = ["$scope", "$log", "$state", "videoServ"], angular.module("app.controls").controller("MainCtrl", MainCtrl), MainCtrl.$inject = ["$scope", "$log"], angular.module("app.controls").controller("UploadCtrl", UploadCtrl), UploadCtrl.$inject = ["$scope", "$log"], angular.module("app.controls").controller("VideoCtrl", VideoCtrl), VideoCtrl.$inject = ["$scope", "$log", "$state", "$stateParams", "videoServ"], angular.module("app.services").factory("videoServ", videoServ), videoServ.$inject = ["$http", "$q", "$log"], angular.module("app.controls").controller("WatchCtrl", WatchCtrl), WatchCtrl.$inject = ["$scope", "$stateParams", "$sce", "$window"];
//# sourceMappingURL=all-ng.min.js.map
