swagger: '2.0'
info:
  title: Cizo API
  description: API for Cizo
  version: 1.0.0
host: api.cizo.com
basePath: /
schemes:
  - https
securityDefinitions:
  oauth:
    type: oauth2
    flow: implicit
    authorizationUrl: https://api.cizo.com/oauth/token
    scopes:
      admin: Grants read/write access to all resources
      user: Grants read access to videos that marked as mature content is the user is 18 years old or older. Grants read/write access to user resource owned by that user.
consumes:
  - application/json
produces:
  - application/json
paths:
  /oauth/token:
    post:
      description: "description"
      tags:
        - Authorization
      parameters:
        - name: body
          in: body
          schema:
            required:
              - grant_type
              - username
              - password
            properties:
              grant_type:
                type: string
                description: grant type, can be password or refresh_token
                format: string
                enum: [password, refresh_token]
              username:
                type: string
                description: User's email. Required if grant_type is password.
              password:
                type: string
                description: User's password. Required if grant_type is password.
              scope:
                description: Authorization scope. Can be sent if grant_type is password.
                type: string
                enum: [ user, admin ]
              refresh_token:
                description: User's refresh token. Required if grant_type is refresh_token.
                type: string
      responses:
        '200':
          description: Returns access_token and refresh_token
          schema:
            type: object
            required:
              - access_token
              - token_type
              - expires_in
              - refresh_token
              - scope
              - created_at
            properties:
              access_token:
                type: string
                description: Uniq access_token
              token_type:
                type: string
                description: Token type, Default - bearer
              expires_in:
                type: integer
                format: int32
                description: Access_token expiration in seconds
              refresh_token:
                type: string
                description: Uniq refresh_token, can be used when access_token expires.
              scope:
                type: string
                description: Scope.
              created_at:
                type: string
                format: date-time

        '400':
          description: 'Bad request. This is returned if grant_type is anything other than "password" or "refresh_token"'
          schema:
            $ref: '#/definitions/Error'
        '422':
          description: 'Unprocessable untity. This is returned if username is blank'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized. This is returned if wrong credentials or invalid refresh_token or invalid scope(anything but the "admin" or "user") have been sent'
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /oauth/facebook:
    get:
      description: "Log in with facebook"
      tags:
        - Authorization
      parameters:
        - name: access_token
          type: string
          in: query
          required: true
          description: "Must give access to user's email and birthday. Can be generated <a href = 'here'>https://developers.facebook.com/tools/explorer?method=GET&path=me%3Ffields%3Did%2Cname%2Cbirthday%2Cemail&version=v2.5<a>"
      responses:
        '200':
          description: Returns access_token and refresh_token
          schema:
            type: object
            required:
              - access_token
              - expires_in
              - refresh_token
              - scope
              - created_at
            properties:
              access_token:
                type: string
                description: Uniq access_token
              expires_in:
                type: integer
                format: int32
                description: Access_token expiration in seconds
              refresh_token:
                type: string
                description: Uniq refresh_token, can be used when access_token expires.
              scope:
                type: string
                description: Scope.
              created_at:
                type: string
                format: date-time
        '400':
          description: 'Bad request. This is returned if access_token is invalid or expired'
  /users/auth/facebook:
    get:
      description: Redirects to facebook page. Access to email and birthday is required. Then redirects back to application and sign in.
      tags:
        - Authorization
      responses:
        '200':
          description: Returns access_token and refresh_token
          schema:
            type: object
            required:
              - access_token
              - expires_in
              - refresh_token
              - scope
              - created_at
            properties:
              access_token:
                type: string
                description: Uniq access_token
              expires_in:
                type: integer
                format: int32
                description: Access_token expiration in seconds
              refresh_token:
                type: string
                description: Uniq refresh_token, can be used when access_token expires.
              scope:
                type: string
                description: Scope.
              created_at:
                type: string
                format: date-time
        '400':
          description: "Login failed, user didn't want to give access."
  /videos:
    get:
      description: "Returns a list of videos ordered by created_at. At most 200 videos will be returned. For an oauth2 scope of 'admin', this includes all videos. For oauth2 scope of 'user' or unauthenticated clients, this includes only videos with 'visible' set to true. <b>NOTE</b>  If the user is unauthenticated and mature_content is true or mature_content is true and the user is less than 18 years old, streams will be null."
      tags:
        - Videos
      parameters:
        - name: category
          in: query
          description: Filters videos by category
          required: false
          type: string
        - name: tags
          in: query
          description: Filters videos by tags. Comma separated list of tags.
          required: false
          type: string
        - name: created_before
          in: query
          description: Filters videos by created_at date. Videos that have a date before the one specified will be returned.
          required: false
          type: string
          format: date-time
        - name: created_after
          in: query
          description: Filters videos by created_at date. Videos that have a date after the one specified will be returned.
          required: false
          type: string
          format: date-time
        - name: visible
          in: query
          description: Filter videos by 'visible' field. If client is unauthenticated or has a token with a scope of 'user', the videos returned will only contain the "id" attribute of each video if this query parameter is set to false.
          required: false
          type: boolean
        - name: deleted
          in: query
          description: Filter videos that have been deleted. The videos returned will only contain the "id" attribute of each video.
          required: false
          type: boolean
        - name: show_mature_content
          in: query
          description: Boolean indicating whether videos containing mature content should appear in the return. Default value is true. 
          required: false
          type: boolean
        - name: count
          in: query
          description: Specifies the number of videos to try and retrieve, up to a maximum of 200.
          required: false
          type: integer
        - name: max_id
          in: query
          description: Specifies the maximum video id to include in the return. Exclusive.
          required: false
          type: integer
        - name: since_id
          in: query
          description: Specifies the minimum video id to include in the return. Exclusive.
          required: false
          type: integer
      responses:
        '200':
          description: An list of videos
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/Video'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      description: 'Creates a video'
      tags:
        - Videos
      security:
        - oauth:
          - admin
      parameters:
        - name: body
          in: body
          required: true
          schema:
            required:
              - title
              - category_id
              - description
            properties:
              title:
                type: string
                description: Title of video.
              subtitle:
                type: string
                description: Subtitle of video
              category_id:
                type: integer
                format: int32
                description: 'Unique identifier of category'
              description_title:
                type: string
                description: Title of video description
              description:
                type: string
                description: Description of video.
              mature_content:
                type: boolean
                description: 'Boolean indicating if the video contains mature content'
                default: false
              tag_list:
                description: Comma seperated list of tags associated with video.
                type: string
      responses:
        '201':
          description: A video
          schema:
            type: object
            required:
              - id
              - category_id
              - created_at
              - updated_at
              - title
              - description
            properties:
              id:
                type: integer
                format: int32
                description: 'Unique identifier representing a specific video'
                readOnly: true
              category_id:
                type: integer
                format: int32
                description: 'Unique identifier of category'
              created_at:
                type: string
                format: date-time
                readOnly: true
              updated_at:
                type: string
                format: date-time
                readOnly: true
              title:
                type: string
                description: Title of video.
              subtitle:
                type: string
                description: Subtitle of video
              description_title:
                type: string
                description: Title of video description
              description:
                type: string
                description: Description of video.
              mature_content:
                type: boolean
                description: 'Boolean indicating if the video contains mature content'
                default: false
              tag_list:
                description: Comma seperated list of tags associated with video.
                type: string
        '403':
          description: 'Forbidden. This is returned if the oauth2 scope is anything other than "admin"'
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /videos/{video-id}:
    parameters:
      - name: video-id
        in: path
        description: Video ID
        type: integer
        required: true
    get:
      description: "Returns a video for the given ID. If the user is unauthenticated and mature_content is true or mature_content is true and the user is less than 18 years old, streams will be null."
      tags:
        - Videos
      responses:
        '200':
          description: A video
          schema:
            $ref: '#/definitions/Video'
        '403':
          description: "Forbidden. This is returned if the client is unauthenticated or has a 'user' scope and the video's visible property is not set to true"
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      description: "Updates a video. The 'streams' and 'hero_image_link' properties are ignored."
      tags:
        - Videos
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/Video'
      responses:
        '200':
          description: A video
          schema:
            $ref: '#/definitions/Video'
        '403':
          description: 'Forbidden. This is returned if the oauth2 scope is anything other than "admin"'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: "Deletes a video"
      tags:
        - Videos
      responses:
        '204':
          description: Successfully deleted
        '403':
          description: 'Forbidden. This is returned if the oauth2 scope is anything other than "admin"'
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /videos/{video-id}/upload_ticket:
    parameters:
      - name: video-id
        in: path
        description: Video ID
        type: integer
        required: true
      - name: filename
        in: query
        description: 'Filename of file to be uploaded. Must contain only lowercase letters, numbers, hyphens (-), and periods (.). Must start and end with a letter or number. Max length of 25.'
        required: true
        type: string
    get:
      description: "This endpoint returns the S3 upload details for client side uploading of a raw stream video for transcoding. See <a href='http://docs.aws.amazon.com/AmazonS3/latest/dev/UsingHTTPPOST.html'>AWS's browser based upload documentation</a> for more details."
      tags:
        - Streams
      security:
        - oauth:
          - admin
      responses:
        '200':
          description: "S3 upload details"
          schema:
            type: object
            required:
              - key
              - aws_access_key_id
              - acl
              - policy
              - signature
            properties:
              key:
                type: string
                description: "Upload key. S3 bucket key to store uploaded video in"
              aws_access_key_id:
                type: string
                description: "Upload AWS access key id"
              acl:
                type: string
                description: "Upload acl"
              policy:
                type: string
                description: "Upload policy"
              signature:
                type: string
                description: "Upload signature"
        '403':
          description: 'Forbidden. This is returned if the oauth2 scope is anything other than "admin"'
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /videos/{video-id}/streams:
    parameters:
      - name: video-id
        in: path
        description: Video ID
        type: integer
        required: true
    post:
      description: "Creates or updates a set of video streams and initiates transcoding for those stream. <b>NOTE</b> The video specified by the 'raw_video_key' must be present in S3. Usually, this matches the 'key' returned by */videos/{video-id}/stream_transcode_request*. <b>NOTE</b> If stream of the specified type already exists, the stream's status must be either 'completed', 'canceled', or 'error' for the update to succeed"
      tags:
        - Streams
      security:
        - oauth:
          - admin
      parameters:
        - name: body
          in: body
          required: true
          schema:
            properties:
              key:
                type: string
                description: "S3 bucket key for raw video."
      responses:
        '202':
          description: "Stream has been accepted for transcoding"
        '400':
          description: "Error occurring when the key specified does not exist in S3"
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: "Error occuring when a stream of that type for that video is in a 'pending' state"
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /videos/streams/transcode_notification:
    post:
      description: "Handles a transcode notification. This includes update the status of the stream for which the notification is for. See <a href='http://docs.aws.amazon.com/elastictranscoder/latest/developerguide/notifications.html'>Elastic Transcoder's SNS documentation</a> for POST body."
      tags:
        - Streams
      responses:
        '202':
          description: "Image has been created or updated"
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /videos/{video-id}/streams/{stream-type}:
    parameters:
      - name: video-id
        in: path
        description: Video ID
        type: integer
        required: true
      - name: stream-type
        in: path
        description: Stream Type
        type: string
        enum:
          - hls
          - mp4
        required: true
    get:
      description: "This endpoint redirects to the location of the stream. Prior to redirecting, it validates that the user meets the age requirements for streaming a video and increases the view count of a video."
      tags:
        - Streams
      security:
        - oauth:
          - admin
      responses:
        '302':
          description: "Redirect to stream location"
        '403':
          description: "Forbidden. This is returned if the user is unauthenticated and mature_content is true or mature_content is true and the user is less than 18 years old."
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /videos/{video-id}/hero_image:
    parameters:
      - name: video-id
        in: path
        description: Video ID
        type: integer
        required: true
    post:
      description: "Creates or updates the hero image for a video. This is a multipart/form-data POST."
      tags:
        - Videos
      security:
        - oauth:
          - admin
      consumes:
        - multipart/form-data
      responses:
        '202':
          description: "Image has been created or updated"
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /featured:
    get:
      description: "Returns a list of featured videos"
      tags:
        - Featured
      responses:
        '200':
          description: A list of videos
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/Video'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /featured/{video-id}:
    parameters:
      - name: video-id
        in: path
        description: Video ID
        type: integer
        required: true
    put:
      description: 'Marks a video as featured.'
      tags:
        - Featured
      security:
        - oauth:
          - admin
      parameters:
        - name: body
          in: body
          required: false
          schema:
            properties:
              featured_order:
                type: integer
                format: int32
                description: Order at which the video should appear within the featured list. If omitted, video will be appended to list. 
      responses:
        '204':
          description: "Video has been marked as featured"
        '403':
          description: 'Forbidden. This is returned if the oauth2 scope is anything other than "admin"'
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: "Removes a video as featured."
      tags:
        - Featured
      security:
        - oauth:
          - admin
      responses:
        '204':
          description: "Featured has been removed"
        '403':
          description: 'Forbidden. This is returned if the oauth2 scope is anything other than "admin"'
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /search:
    get:
      description: "Searches using the specfied parameter and returns a list of matching videos."
      tags:
        - Search
      parameters:
        - name: search
          in: query
          description: Phrase to search by
          required: false
          type: string
      responses:
        '200':
          description: A list of videos
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/Video'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /trending:
    get:
      description: "Returns a list of trending videos"
      tags:
        - Trending
      responses:
        '200':
          description: A list of videos
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/Video'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /categories:
    get:
      description: "Returns a list of categories"
      tags:
        - Categories
      responses:
        '200':
          description: A list of categories
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/Category'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      description: "Creates a category. Title must be unique"
      tags:
        - Categories
      security:
        - oauth:
          - admin
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/Category'
      responses:
        '200':
          description: A category
          schema:
            $ref: '#/definitions/Category'
        '403':
          description: 'Forbidden. This is returned if the oauth2 scope is anything other than "admin"'
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: 'Error occurring when a Category with that title already exists'
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /categories/{category-id}:
    parameters:
      - name: category-id
        in: path
        description: Category ID
        type: integer
        required: true
    get:
      description: "Returns a category for the given ID."
      tags:
        - Categories
      responses:
        '200':
          description: A category
          schema:
            $ref: '#/definitions/Category'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      description: "Updates a category. Title must be unique."
      tags:
        - Categories
      security:
        - oauth:
          - admin
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/Category'
      responses:
        '200':
          description: A category
          schema:
            $ref: '#/definitions/Category'
        '403':
          description: 'Forbidden. This is returned if the oauth2 scope is anything other than "admin"'
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: 'Error occurring when a Category with that title already exists'
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: "Deletes a category"
      tags:
        - Categories
      security:
        - oauth:
          - admin
      responses:
        '204':
          description: Successfully deleted
        '403':
          description: 'Forbidden. This is returned if the oauth2 scope is anything other than "admin"'
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /users:
    get:
      description: 'Returns a list of all users.'
      tags:
        - Users
      security:
        - oauth:
          - admin
      tags:
        - Users
      responses:
        '200':
          description: A list of users
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/User'
        '403':
          description: 'Forbidden. This is returned if the oauth2 scope is anything other than "admin"'
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      description: 'Creates a user.'
      tags:
        - Users
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              user:
                $ref: '#/definitions/User'
      responses:
        '200':
          description: A user
          schema:
            $ref: '#/definitions/User'
        '403':
          description: 'Forbidden. This is returned if the oauth2 scope is anything other than "admin"'
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /users/{user-id}:
    parameters:
      - name: user-id
        in: path
        description: User ID
        type: integer
        required: true
    get:
      description: "Returns a user for the given ID."
      tags:
        - Users
      responses:
        '200':
          description: A user
          schema:
            $ref: '#/definitions/User'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      description: 'Updates a user.'
      tags:
        - Users
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              user:
                $ref: '#/definitions/User'
      responses:
        '200':
          description: A user
          schema:
            $ref: '#/definitions/User'
        '403':
          description: 'Forbidden. This is returned if the oauth2 scope is anything other than "admin"'
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /users/me:
    get:
      description: 'Gets the current user'
      tags:
        - Users
      security:
        - oauth:
          - user
      responses:
        '200':
          description: The user object
          schema:
            $ref: '#/definitions/User'
        '404':
          description: User is not logged in
          schema:
            $ref: '#/definitions/Error'
    put:
      description: 'Updates the current user.'
      tags:
        - Users
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              user:
                $ref: '#/definitions/User'
      responses:
        '200':
          description: A user
          schema:
            $ref: '#/definitions/User'
        '404':
          description: User is not logged in
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: "Deletes the current user. All oauth2 tokens for the user will be revoked"
      tags:
        - Users
      security:
        - oauth:
          - user
      responses:
        '204':
          description: "User has been removed"
        '403':
          description: 'Forbidden. This is returned if the oauth2 scope is anything other than "user"'
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /users/me/videos/seen:
    get:
      description: 'Gets a list of videos seen by the current user'
      tags:
        - Users
      parameters:
        - name: created_before
          in: query
          description: Filters videos by created_at date. Videos that have a date before the one specified will be returned.
          required: false
          type: string
          format: date-time
        - name: created_after
          in: query
          description: Filters videos by created_at date. Videos that have a date after the one specified will be returned.
          required: false
          type: string
          format: date-time
        - name: count
          in: query
          description: Specifies the number of videos to try and retrieve up to a maximum of 200.
          required: false
          type: integer
      security:
        - oauth:
          - user
      responses:
        '200':
          description: Seen videos
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/Video'
        '404':
          description: User is not logged in
          schema:
            $ref: '#/definitions/Error'
    put:
      description: "Marks a list of videos as seen. The video's skipped parameter will be set to false and removed from the skipped resource if present."
      tags:
        - Users
      security:
        - oauth:
          - user
      parameters:
        - name: body
          in: body
          required: true
          schema:
            properties:
              data:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      format: int32
                      description: 'Unique identifier representing a specific video'
      responses:
        '202':
          description: "Videos have been accepted for processing. Processing happens in the background. GET /users/me/videos/seen should be used to validate success."
        '403':
          description: 'Forbidden. This is returned if the oauth2 scope is anything other than "user"'
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /users/me/videos/seen/{video-id}:
    parameters:
      - name: video-id
        in: path
        description: Video ID
        type: integer
        required: true
    put:
      description: "Marks a video as seen. The video's skipped parameter will be set to false and removed from the skipped resource if present."
      tags:
        - Users
      security:
        - oauth:
          - user
      responses:
        '204':
          description: "Video has been marked as seen."
        '403':
          description: 'Forbidden. This is returned if the oauth2 scope is anything other than "user"'
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /users/me/videos/unseen:
    get:
      description: 'Gets a list of videos unseen by the current user'
      tags:
        - Users
      parameters:
        - name: created_before
          in: query
          description: Filters videos by created_at date. Videos that have a date before the one specified will be returned.
          required: false
          type: string
          format: date-time
        - name: created_after
          in: query
          description: Filters videos by created_at date. Videos that have a date after the one specified will be returned.
          required: false
          type: string
          format: date-time
        - name: count
          in: query
          description: Specifies the number of videos to try and retrieve up to a maximum of 200.
          required: false
          type: integer
      security:
        - oauth:
          - user
      responses:
        '200':
          description: Unseen videos
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/Video'
        '404':
          description: User is not logged in
          schema:
            $ref: '#/definitions/Error'
  /users/me/videos/skipped:
    get:
      description: 'Gets a list of videos skipped by the current user'
      tags:
        - Users
      parameters:
        - name: created_before
          in: query
          description: Filters videos by created_at date. Videos that have a date before the one specified will be returned.
          required: false
          type: string
          format: date-time
        - name: created_after
          in: query
          description: Filters videos by created_at date. Videos that have a date after the one specified will be returned.
          required: false
          type: string
          format: date-time
        - name: count
          in: query
          description: Specifies the number of videos to try and retrieve up to a maximum of 200.
          required: false
          type: integer
      security:
        - oauth:
          - user
      responses:
        '200':
          description: Skipped videos
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/Video'
        '404':
          description: User is not logged in
          schema:
            $ref: '#/definitions/Error'
    put:
      description: "Marks a list of videos as skipped."
      tags:
        - Users
      security:
        - oauth:
          - user
      parameters:
        - name: body
          in: body
          required: true
          schema:
            properties:
              data:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      format: int32
                      description: 'Unique identifier representing a specific video'
      responses:
        '202':
          description: "Videos have been accepted for processing. Processing happens in the background. GET /users/me/videos/skipped should be used to validate success."
        '403':
          description: 'Forbidden. This is returned if the oauth2 scope is anything other than "user"'
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /users/me/videos/skipped/{video-id}:
    parameters:
      - name: video-id
        in: path
        description: Video ID
        type: integer
        required: true
    put:
      description: 'Marks a video as skipped.'
      tags:
        - Users
      security:
        - oauth:
          - user
      responses:
        '204':
          description: "Video has been marked as skipped"
        '403':
          description: 'Forbidden. This is returned if the oauth2 scope is anything other than "user"'
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /users/me/videos/liked:
    get:
      description: 'Gets a list of videos liked by the current user'
      tags:
        - Users
      parameters:
        - name: created_before
          in: query
          description: Filters videos by created_at date. Videos that have a date before the one specified will be returned.
          required: false
          type: string
          format: date-time
        - name: created_after
          in: query
          description: Filters videos by created_at date. Videos that have a date after the one specified will be returned.
          required: false
          type: string
          format: date-time
        - name: count
          in: query
          description: Specifies the number of videos to try and retrieve up to a maximum of 200.
          required: false
          type: integer
      security:
        - oauth:
          - user
      responses:
        '200':
          description: Liked videos
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/Video'
        '404':
          description: User is not logged in
          schema:
            $ref: '#/definitions/Error'
    put:
      description: "Marks a list of videos as liked."
      tags:
        - Users
      security:
        - oauth:
          - user
      parameters:
        - name: body
          in: body
          required: true
          schema:
            properties:
              data:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      format: int32
                      description: 'Unique identifier representing a specific video'
      responses:
        '202':
          description: "Videos have been accepted for processing. Processing happens in the background. GET /users/me/videos/liked should be used to validate success."
        '403':
          description: 'Forbidden. This is returned if the oauth2 scope is anything other than "user"'
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /users/me/videos/liked/{video-id}:
    parameters:
      - name: video-id
        in: path
        description: Video ID
        type: integer
        required: true
    put:
      description: 'Marks a video as liked.'
      tags:
        - Users
      security:
        - oauth:
          - user
      responses:
        '204':
          description: "Video has been marked as liked"
        '403':
          description: 'Forbidden. This is returned if the oauth2 scope is anything other than "user"'
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: "Removes a like on a video."
      tags:
        - Users
      security:
        - oauth:
          - user
      responses:
        '204':
          description: "Like has been removed"
        '403':
          description: 'Forbidden. This is returned if the oauth2 scope is anything other than "user"'
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /users/guest/videos/seen/{video-id}:
    parameters:
      - name: video-id
        in: path
        description: Video ID
        type: integer
        required: true
    put:
      description: "Marks a video as seen for guest users"
      tags:
        - Users
      responses:
        '204':
          description: "Video has been marked as seen."
  /users/guest/videos/skipped/{video-id}:
    parameters:
      - name: video-id
        in: path
        description: Video ID
        type: integer
        required: true
    put:
      description: "Marks a video as skipped for guest users"
      tags:
        - Users
      responses:
        '204':
          description: "Video has been marked as seen."
  /users/password_reset:
    post:
      description: "Sends email with reset password instructions"
      tags:
        - Users
      parameters:
        - name: body
          in: body
          required: true
          schema:
            properties:
              email:
                type: string
                description: 'Unique identifier representing a specific video'
      responses:
        '200':
          description: "Email with reset password instructions has been sent."
  /users/password/edit:
    parameters:
      - name: reset_password_token
        in: query
        description: Valid reset_password_token from email.
        type: string
        required: true
    get:
      description: "Returns valid reset_password_token"
      tags:
        - Users
      responses:
        '200':
          description: "Email with reset password instructions has been sent."
        '400':
          description: "Token is expired or invalid"
  /users/password:
    put:
      description: "Update user's password"
      tags:
        - Users
      parameters:
        - name: body
          in: body
          required: true
          schema:
            properties:
              password:
                type: string
                description: New password
              reset_password_token: 
                type: string
                description: Valid password reset token
      responses:
        '200':
          description: "Password has been changed"
        '400':
          description: "Invalid password or/and invalid reset_password_token"
definitions:
  Video:
    type: object
    required:
      - title
      - description
      - category_id
    properties:
      id:
        type: integer
        format: int32
        description: 'Unique identifier representing a specific video'
        readOnly: true
      created_at:
        type: string
        format: date-time
        readOnly: true
      updated_at:
        type: string
        format: date-time
        readOnly: true
      deleted_at:
        type: string
        format: date-time
        readOnly: true
      title:
        type: string
        description: Title of video.
      subtitle:
        type: string
        description: Subtitle of video
      description_title:
        type: string
        description: Title of video description
      description:
        type: string
        description: Description of video.
      link:
        type: string
        description: Link to page of video
      mature_content:
        type: boolean
        description: 'Boolean indicating if the video contains mature content'
        default: false
      category_id:
        type: integer
        format: int32
        description: 'Unique identifier of category'
      visible:
        type: boolean
        description: Whether a video is visible. This property is only visible to clients with an oauth2 scope of 'admin'
      tag_list:
        description: Comma seperated list of tags associated with video.
        type: string
      streams:
        type: array
        readOnly: true
        items:
          $ref: '#/definitions/Stream'
      hero_image_upload_status:
        type: string
        description: Hero image up. This property is only visible to clients with an oauth2 scope of 'admin'
        readOnly: true
        enum:
          - 'pending'
          - 'processing'
          - 'error'
          - 'completed'
          - 'idle'
      hero_images:
        type: object
        readOnly: true
        properties:
          hero_image_link:
            type: string
            description: Full resolution hero image URL.
          hero_image_link_large_banner:
            type: string
            description: Large banner hero image URL.
          hero_image_link_medium_banner:
            type: string
            description: Medium banner hero image URL.
          hero_image_link_thumb_banner:
            type: string
            description: Thumb banner hero image URL.
      liked:
        type: boolean
        description: 'Boolean representing whether the current user has liked the video. This property is not present for unauthenticated clients.'
        default: false
        readOnly: true
      seen:
        type: boolean
        description: 'Boolean representing whether the current user has seen the video. This property is not present for unauthenticated clients.'
        default: false
        readOnly: true
      skipped:
        type: boolean
        description: 'Boolean representing whether the current user has skipped the video. This property is not present for unauthenticated clients.'
        default: false
        readOnly: true
      view_count:
        type: integer
        description: >
          View count. <b>NOTE</b> This only visible if oauth2 scope is "admin".
        format: int32
        readOnly: true
      skip_count:
        type: integer
        description: >
          View count. <b>NOTE</b> This only visible if oauth2 scope is "admin".
        format: int32
        readOnly: true
  Category:
    type: object
    required:
      - title
    properties:
      id:
        type: integer
        format: int32
        description: 'Unique identifier representing a specific category'
        readOnly: true
      title:
        type: string
        description: Title of category
      canonical_title:
        type: string
        readOnly: true
        description: 'Canonical title of category. This field is suitable for matching on a specific category. For example, if a client wants to find the "Movies" category, the client should look for a category with a canonical_title of "movies". This field is computed when creating or updating a category.'
  Stream:
    type: object
    required:
      - link
      - stream_type
      - transcode_status
    properties:
      link:
        type: string
        description: 'URL of stream.'
      stream_type:
        type: string
        description: 'Type of stream.'
        enum:
          - 'hls'
          - 'mp4'
      transcode_status:
        type: string
        description: 'Transcode status. This property is only visible to oauth2 scope of "admin"'
        readOnly: true
        enum:
          - 'pending'
          - 'submitted'
          - 'progressing'
          - 'completed'
          - 'canceled'
          - 'error'
  User:
    type: object
    required:
      - email
      - password
      - birthday
    properties:
      id:
        type: integer
        format: int32
        description: 'Unique identifier representing a specific video'
        readOnly: true
      email:
        type: string
        description: Email of user
      password:
        type: string
        description: Password of user. This is omitted from any endpoint returns
      password_confirmation:
        type: string
        description: Password of user. This is omitted from any endpoint returns
      birthday:
        type: string
        format: date-time
        description: Birthday of user. <a href="http://xml2rfc.ietf.org/public/rfc/html/rfc3339.html#anchor14">ISO-8061 date-time</a>. Timezone is UTC
  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
