swagger: '2.0'
info:
  title: Cizo API
  description: API for Cizo
  version: 1.0.0
host: api.cizo.com
schemes:
  - https
securityDefinitions: 
  oauth:
    type: oauth2
    flow: implicit
    authorizationUrl: https://api.cizo.com/oauth/authorize
    scopes:
      admin: Grants read/write access to all resources
      user: Grants read access to videos that have a MPAA rating greater than G if the user meets the age requirement for a given mpaa_rating
basePath: /v1
consumes:
  - application/json
produces:
  - application/json
paths:
  /videos:
    get:
      description: "Returns a list of videos ordered by created_at. At most 1000 videos will be returned. For an oauth2 scope of 'admin', this includes all videos. For oauth2 scope of 'user' or unauthenticated clients, this includes only videos with 'viewable' set to true. <b>NOTE</b>  If the user is unauthenticated and the mpaa_rating is greater than 'G' or is not of the age required for the mpaa_rating, streams will be null."
      tags:
        - Videos
      parameters:
        - name: category
          in: query
          description: Filters videos by category
          required: false
          type: string
        - name: tags
          in: query
          description: Filters videos by tags. Comma separated list of tags.
          required: false
          type: string
        - name: created_before
          in: query
          description: Filters videos by created_at date. Videos that have a date before the one specified will be returned.
          required: false
          type: string
          format: date-time
        - name: created_after
          in: query
          description: Filters videos by created_at date. Videos that have a date after the one specified will be returned.
          required: false
          type: string
          format: date-time
      responses:
        '200':
          description: An list of videos
          schema:
            type: object
            properties:
              data:
                type: array
                items: 
                  $ref: '#/definitions/Video'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      description: 'Creates a video'
      tags:
        - Videos
      security:
        - oauth: 
          - admin
      parameters:
        - name: body
          in: body
          required: true
          schema:
            required:
              - title
              - category_id
              - description
              - mpaa_rating
            properties:
              title:
                type: string
                description: Title of video.
              category_id:
                type: integer
                format: int32
                description: 'Unique identifier of category'
              description:
                type: string
                description: Description of video.
              mpaa_rating:
                type: string
                description: 'MPAA rating of video. This must be one of the following strings: "G", "PG", "PG-13", "R", "NC-17"'
                enum:
                  - "G"
                  - "PG"
                  - "PG-13"
                  - "R"
                  - "NC-17"
              tags:
                description: Tags associated with video.
                type: array
                items:
                  type: string
      responses:
        '201':
          description: A video
          schema:
            type: object
            required:
              - id
              - category_id
              - created_at
              - updated_at
              - title
              - description
              - mpaa_rating
            properties:
              id:
                type: integer
                format: int32
                description: 'Unique identifier representing a specific video'
                readOnly: true
              category_id:
                type: integer
                format: int32
                description: 'Unique identifier of category'
              created_at:
                type: string
                format: date-time
                readOnly: true
              updated_at:
                type: string
                format: date-time
                readOnly: true    
              title:
                type: string
                description: Title of video.
              description:
                type: string
                description: Description of video.
              mpaa_rating:
                type: string
                description: 'MPAA rating of video. This must be one of the following strings: "G", "PG", "PG-13", "R", "NC-17"'
                enum:
                  - "G"
                  - "PG"
                  - "PG-13"
                  - "R"
                  - "NC-17"
              tags:
                type: array
                items:
                  type: string
        '403':
          description: 'Forbidden. This is returned if the oauth2 scope is anything other than "admin"'
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /videos/{video-id}:
    parameters:
      - name: video-id
        in: path
        description: Video ID
        type: integer
        required: true
    get:
      description: "Returns a video for the given ID. If the user is unauthenticated and the mpaa_rating is greater than PG or is not the age required for the mpaa_rating, streams will be null."
      tags:
        - Videos
      responses:
        '200':
          description: A video
          schema:
            type: object
            $ref: '#/definitions/Video'
        '403': 
          description: "Forbidden. This is returned if the client is unauthenticated or has a 'user' scope and the video's viewable property is not set to true"
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      description: "Updates a video. The 'streams' and 'hero_image_link' properties are ignored."
      tags:
        - Videos
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/Video'
      responses:
        '200':
          description: A video
          schema:
            type: object
            $ref: '#/definitions/Video'
        '403':
          description: 'Forbidden. This is returned if the oauth2 scope is anything other than "admin"'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: "Deletes a video"
      tags:
        - Videos
      responses:
        '204':
          description: Successfully deleted
        '403': 
          description: 'Forbidden. This is returned if the oauth2 scope is anything other than "admin"'
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /videos/{video-id}/stream_transcode_request:
    parameters:
      - name: video-id
        in: path
        description: Video ID
        type: integer
        required: true
    get:
      description: "This endpoint returns the S3 upload details for client side uploading of a stream video for transcoding. See <a href='http://docs.aws.amazon.com/AmazonS3/latest/dev/UsingHTTPPOST.html'>AWS's browser based upload documentation</a> for more details."
      tags:
        - Streams
      security:
        - oauth: 
          - admin
      responses:
        '200':
          description: "S3 upload details"
          schema:
            type: object
            required:
              - key
              - aws_access_key_id
              - acl
              - policy
              - signature
            properties:
              key:
                type: string
                description: "Upload key. S3 bucket key to store uploaded video in"
              aws_access_key_id: 
                type: string
                description: "Upload AWS access key id"
              acl: 
                type: string
                description: "Upload acl"
              policy: 
                type: string
                description: "Upload policy"
              signature:
                type: string
                description: "Upload signature"
        '403':
          description: 'Forbidden. This is returned if the oauth2 scope is anything other than "admin"'
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /videos/{video-id}/streams:
    parameters:
      - name: video-id
        in: path
        description: Video ID
        type: integer
        required: true
    post:
      description: "Creates or updates a set of video streams and initiates transcoding for those stream. <b>NOTE</b> The video specified by the 'raw_video_key' must be present in S3. Usually, this matches the 'key' returned by */videos/{video-id}/stream_transcode_request*. <b>NOTE</b> If stream of the specified type already exists, the stream's status must be either 'complete', 'canceled', or 'error' for the update to succeed"
      tags:
        - Streams
      security:
        - oauth: 
          - admin
      parameters:
        - name: body
          in: body
          required: true
          schema:
            properties:
              key:
                type: string
                description: "S3 bucket key for raw video."
              types:
                type: array
                description: "Target stream types. Only 'hls' and 'mp4' are supported."
                items:
                  type: string
      responses:
        '202':
          description: "Stream has been accepted for transcoding"
        '400':
          description: "Error occurring when the key specified does not exist in S3"
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: "Error occuring when a stream of that type for that video is in a 'pending' state"
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /videos/streams/transcode_notification:
    post:
      description: "Handles a transcode notification. This includes update the status of the stream for which the notification is for. See <a href='http://docs.aws.amazon.com/elastictranscoder/latest/developerguide/notifications.html'>Elastic Transcoder's SNS documentation</a> for POST body."
      tags:
        - Streams
      responses:
        '202':
          description: "Image has been created or updated"
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /videos/{video-id}/streams/{stream-type}:
    parameters:
      - name: video-id
        in: path
        description: Video ID
        type: integer
        required: true
      - name: stream-type
        in: path
        description: Stream Type
        type: string
        enum:
          - hls
          - mp4
        required: true
    get:
      description: "This endpoint redirects to the location of the stream. Prior to redirecting, it validates that the user meets the age requirements for streaming a video and increases the view count of a video."
      tags:
        - Streams
      security:
        - oauth: 
          - admin
      responses:
        '302':
          description: "Redirect to stream location"
        '403':
          description: "Forbidden. This is returned if the mpaa_rating is greater than G and the client is unauthenticated and the mpaa_rating is greater than 'G' or is not of the age required for the mpaa_rating"
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /videos/{video-id}/hero_image:
    parameters:
      - name: video-id
        in: path
        description: Video ID
        type: integer
        required: true
    post:
      description: "Creates or updates the hero image for a video. This is a multipart/form-data POST."
      tags:
        - Videos
      security:
        - oauth: 
          - admin
      consumes: 
        - multipart/form-data
      responses:
        '202':
          description: "Image has been created or updated"
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /videos/{video-id}/like:
    parameters:
      - name: video-id
        in: path
        description: Video ID
        type: integer
        required: true
    put:
      description: "Set a like on a video."
      tags:
        - Videos
      security:
        - oauth: 
          - user
      responses:
        '204':
          description: "Video has been liked"
        '403':
          description: 'Forbidden. This is returned if the oauth2 scope is anything other than "user"'
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: "Remove a like on a video."
      tags:
        - Videos
      security:
        - oauth: 
          - user
      responses:
        '204':
          description: "Like has been removed"
        '403':
          description: 'Forbidden. This is returned if the oauth2 scope is anything other than "user"'
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /trending:
    get: 
      description: "Returns a list of trending videos"
      tags: 
        - Trending
      responses:
        '200':
          description: A list of videos
          schema:
            type: object
            properties:
              data:
                type: array
                items: 
                  $ref: '#/definitions/Video'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'            
  /categories:
    get: 
      description: "Returns a list of categories"
      tags: 
        - Categories
      responses:
        '200':
          description: A list of categories
          schema:
            type: object
            properties:
              data:
                type: array
                items: 
                  $ref: '#/definitions/Category'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      description: "Creates a category. Title must be unique"
      tags: 
        - Categories
      security:
        - oauth:
          - admin
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/Category'
      responses:
        '200':
          description: A category
          schema:
            type: object
            $ref: '#/definitions/Category'
        '403':
          description: 'Forbidden. This is returned if the oauth2 scope is anything other than "admin"'
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: 'Error occurring when a Category with that title already exists'
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /categories/{category-id}:
    parameters:
      - name: category-id
        in: path
        description: Category ID
        type: integer
        required: true
    get:
      description: "Returns a category for the given ID."
      tags:
        - Categories
      responses:
        '200':
          description: A category
          schema:
            type: object
            $ref: '#/definitions/Category'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      description: "Updates a category. Title must be unique."
      tags:
        - Categories
      security:
        - oauth:
          - admin
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/Category'
      responses:
        '200':
          description: A category
          schema:
            type: object
            $ref: '#/definitions/Category'
        '403':
          description: 'Forbidden. This is returned if the oauth2 scope is anything other than "admin"'
          schema:
            $ref: '#/definitions/Error'             
        '409':
          description: 'Error occurring when a Category with that title already exists'
          schema:
            $ref: '#/definitions/Error'      
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: "Deletes a category"
      tags:
        - Categories
      security:
        - oauth:
          - admin
      responses:
        '204':
          description: Successfully deleted
        '403': 
          description: 'Forbidden. This is returned if the oauth2 scope is anything other than "admin"'
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /users:
    get:
      description: 'Returns a list of all users.'
      tags:
        - Users
      security:
        - oauth: 
          - admin
      tags:
        - Users
      responses:
        '200':
          description: A list of users
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/User'
        '403':
          description: 'Forbidden. This is returned if the oauth2 scope is anything other than "admin"'
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      description: 'Creates a user.'
      tags:
        - Users
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: A user
          schema:
            type: object
            $ref: '#/definitions/User'
        '403':
          description: 'Forbidden. This is returned if the oauth2 scope is anything other than "admin"'
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /users/{user-id}:
    parameters:
      - name: user-id
        in: path
        description: User ID
        type: integer
        required: true
    get:
      description: "Returns a user for the given ID."
      tags:
        - Users
      responses:
        '200':
          description: A user
          schema:
            type: object
            $ref: '#/definitions/User'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      description: 'Updates a user.'
      tags:
        - Users
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: A user
          schema:
            type: object
            $ref: '#/definitions/User'
        '403':
          description: 'Forbidden. This is returned if the oauth2 scope is anything other than "admin"'
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /users/me:
    get:
      description: 'Gets the current user'
      tags: 
        - Users
      security:
        - oauth:
          - user
      responses:
        '200':
          description: The user object
          schema:
            type: object
            $ref: '#/definitions/User'
        '404':
          description: User is not logged in
          schema:
            $ref: '#/definitions/Error'
    put:
      description: 'Updates the current user.'
      tags:
        - Users
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: A user
          schema:
            type: object
            $ref: '#/definitions/User'
        '404':
          description: User is not logged in
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: "Deletes the current user. All oauth2 tokens for the user will be revoked"
      tags:
        - Users
      security:
        - oauth: 
          - user
      responses:
        '204':
          description: "User has been removed"
        '403':
          description: 'Forbidden. This is returned if the oauth2 scope is anything other than "user"'
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /users/me/videos/likes:
    get:
      description: 'Gets a list of videos liked by the current user'
      tags: 
        - Users
      security:
        - oauth:
          - user
      responses:
        '200':
          description: Liked videos
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/Video'
        '404':
          description: User is not logged in
          schema:
            $ref: '#/definitions/Error'
definitions:
  Video:
    type: object
    required:
      - title
      - description
      - mpaa_rating
      - category_id
    properties:
      id:
        type: integer
        format: int32
        description: 'Unique identifier representing a specific video'
        readOnly: true
      created_at:
        type: string
        format: date-time
        readOnly: true
      updated_at:
        type: string
        format: date-time
        readOnly: true    
      title:
        type: string
        description: Title of video.
      description:
        type: string
        description: Description of video.
      mpaa_rating:
        type: string
        description: 'MPAA rating of video. This must be one of the following strings: "G", "PG", "PG-13", "R", "NC-17"'
        enum:
          - "G"
          - "PG"
          - "PG-13"
          - "R"
          - "NC-17"
      category_id:
        type: integer
        format: int32
        description: 'Unique identifier of category'
      viewable: 
        type: boolean
        description: Whether a video is viewable. This property is only visible to clients with an oauth2 scope of 'admin'
      tags:
        type: array
        items:
          type: string
      streams:
        type: array
        readOnly: true
        items:
          $ref: '#/definitions/Stream'
      hero_image_link:
        type: string
        description: Image URL representing the video.
      liked:
        type: boolean
        description: 'Boolean representing whether the current user has liked the video. This property is always false for unauthenticated clients.'
        default: false
        readOnly: true
      view_count:
        type: integer
        description: >
          View count. <b>NOTE</b> This only visible if oauth2 scope is "admin".
        format: int32
        readOnly: true
  Category:
    type: object
    required:
      - title
    properties:
      id:
        type: integer
        format: int32
        description: 'Unique identifier representing a specific category'
        readOnly: true
      title:
        type: string
        description: Title of category
  Stream:
    type: object
    required:
      - link
      - type
      - transcode_status
    properties:
      link:
        type: string
        description: 'URL of stream.'
      type:
        type: string
        description: 'Type of stream.'
        enum:
          - 'hls'
          - 'mp4'
      transcode_status:
        type: string
        description: 'Transcode status. This property is only visible to oauth2 scope of "admin"'
        readOnly: true
        enum:
          - 'submitted'
          - 'progressing'
          - 'complete'
          - 'canceled'
          - 'error'
  User:
    type: object
    required:
      - email
      - password
      - birthday
    properties:
      id:
        type: integer
        format: int32
        description: 'Unique identifier representing a specific video'
        readOnly: true
      email:
        type: string
        description: Email of user
      password:
        type: string
        description: Password of user. This is omitted from any endpoint returns
      birthday:
        type: string
        format: date-time
        description: Birthday of user. <a href="http://xml2rfc.ietf.org/public/rfc/html/rfc3339.html#anchor14">ISO-8061 date-time</a>. Timezone is UTC
  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string